import json
from typing import List, Optional

from botocore.client import BaseClient

from dstack.backend.aws import runners
from dstack.backend.base.secrets import SecretsManager
from dstack.core.repo import RepoAddress
from dstack.core.secret import Secret


class AWSSecretsManager(SecretsManager):
    def __init__(
        self,
        secretsmanager_client: BaseClient,
        iam_client: BaseClient,
        sts_client: BaseClient,
        bucket_name: str,
    ):
        self.secretsmanager_client = secretsmanager_client
        self.iam_client = iam_client
        self.sts_client = sts_client
        self.bucket_name = bucket_name

    def get_secret(self, repo_address: RepoAddress, secret_name: str) -> Optional[Secret]:
        return _get_secret(
            secretsmanager_client=self.secretsmanager_client,
            bucket_name=self.bucket_name,
            repo_address=repo_address,
            secret_name=secret_name,
        )

    def add_secret(self, repo_address: RepoAddress, secret: Secret):
        _add_secret(
            secretsmanager_client=self.secretsmanager_client,
            sts_client=self.sts_client,
            iam_client=self.iam_client,
            bucket_name=self.bucket_name,
            repo_address=repo_address,
            secret=secret,
        )

    def update_secret(self, repo_address: RepoAddress, secret: Secret):
        _update_secret(
            secretsmanager_client=self.secretsmanager_client,
            bucket_name=self.bucket_name,
            repo_address=repo_address,
            secret=secret,
        )

    def delete_secret(self, repo_address: RepoAddress, secret_name: str):
        _delete_secret(
            secretsmanager_client=self.secretsmanager_client,
            bucket_name=self.bucket_name,
            repo_address=repo_address,
            secret_name=secret_name,
        )


def _get_secret(
    secretsmanager_client: BaseClient,
    bucket_name: str,
    repo_address: RepoAddress,
    secret_name: str,
) -> Optional[Secret]:
    try:
        return Secret(
            secret_name,
            secretsmanager_client.get_secret_value(
                SecretId=f"/dstack/{bucket_name}/secrets/{repo_address.path()}/{secret_name}"
            )["SecretString"],
        )
    except Exception as e:
        if (
            hasattr(e, "response")
            and e.response.get("Error")
            and e.response["Error"].get("Code")
            in ["ResourceNotFoundException", "InvalidRequestException"]
        ):
            return None
        else:
            raise e


def _add_secret(
    sts_client: BaseClient,
    iam_client: BaseClient,
    secretsmanager_client: BaseClient,
    bucket_name: str,
    repo_address: RepoAddress,
    secret: Secret,
):
    secret_id = f"/dstack/{bucket_name}/secrets/{repo_address.path()}/{secret.secret_name}"
    secretsmanager_client.create_secret(
        Name=secret_id,
        SecretString=secret.secret_value,
        Description="Generated by dstack",
        Tags=[
            {"Key": "owner", "Value": "dstack"},
            {"Key": "dstack_bucket", "Value": bucket_name},
        ],
    )
    role_name = runners.role_name(iam_client, bucket_name)
    account_id = sts_client.get_caller_identity()["Account"]
    secretsmanager_client.put_resource_policy(
        SecretId=secret_id,
        ResourcePolicy=json.dumps(
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {"AWS": f"arn:aws:iam::{account_id}:role/{role_name}"},
                        "Action": [
                            "secretsmanager:GetSecretValue",
                            "secretsmanager:ListSecrets",
                        ],
                        "Resource": "*",
                    }
                ],
            }
        ),
    )


def _update_secret(
    secretsmanager_client: BaseClient,
    bucket_name: str,
    repo_address: RepoAddress,
    secret: Secret,
):
    secret_id = f"/dstack/{bucket_name}/secrets/{repo_address.path()}/{secret.secret_name}"
    secretsmanager_client.put_secret_value(
        SecretId=secret_id,
        SecretString=secret.secret_value,
    )


def _delete_secret(
    secretsmanager_client: BaseClient,
    bucket_name: str,
    repo_address: RepoAddress,
    secret_name: str,
):
    secretsmanager_client.delete_secret(
        SecretId=f"/dstack/{bucket_name}/secrets/{repo_address.path()}/{secret_name}",
        ForceDeleteWithoutRecovery=True,
    )
