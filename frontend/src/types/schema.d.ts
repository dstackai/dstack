/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


declare interface paths {
  "/": {
    /** Index */
    get: operations["index__get"];
  };
  "/api/auth/github/authorize": {
    /** Github Authorize */
    post: operations["github_authorize_api_auth_github_authorize_post"];
  };
  "/api/auth/github/callback": {
    /** Github Callback */
    post: operations["github_callback_api_auth_github_callback_post"];
  };
  "/api/user/{username}/payments/list": {
    /** List User Manual Payments */
    post: operations["list_user_manual_payments_api_user__username__payments_list_post"];
  };
  "/api/user/{username}/payments/add": {
    /** Add User Manual Payment */
    post: operations["add_user_manual_payment_api_user__username__payments_add_post"];
  };
  "/api/project/{project_name}/backends/create": {
    /** Create Backend */
    post: operations["create_backend_api_project__project_name__backends_create_post"];
  };
  "/api/project/{project_name}/backends/update": {
    /** Update Backend */
    post: operations["update_backend_api_project__project_name__backends_update_post"];
  };
  "/api/project/{project_name}/backends/delete": {
    /** Delete Backends */
    post: operations["delete_backends_api_project__project_name__backends_delete_post"];
  };
  "/api/project/{project_name}/backends/create_yaml": {
    /** Create Backend Yaml */
    post: operations["create_backend_yaml_api_project__project_name__backends_create_yaml_post"];
  };
  "/api/project/{project_name}/backends/update_yaml": {
    /** Update Backend Yaml */
    post: operations["update_backend_yaml_api_project__project_name__backends_update_yaml_post"];
  };
  "/api/project/{project_name}/backends/{backend_name}/get_yaml": {
    /** Get Backend Yaml */
    post: operations["get_backend_yaml_api_project__project_name__backends__backend_name__get_yaml_post"];
  };
  "/api/project/{project_name}/backend/{backend_name}/quotas/list": {
    /** List Backend Quotas */
    post: operations["list_backend_quotas_api_project__project_name__backend__backend_name__quotas_list_post"];
  };
  "/api/project/{project_name}/backend/{backend_name}/quotas/set": {
    /** Set Backend Quotas */
    post: operations["set_backend_quotas_api_project__project_name__backend__backend_name__quotas_set_post"];
  };
  "/api/billing/info": {
    /** Billing Info */
    post: operations["billing_info_api_billing_info_post"];
  };
  "/api/billing/stripe_webhook": {
    /** Stripe Webhook */
    post: operations["stripe_webhook_api_billing_stripe_webhook_post"];
  };
  "/api/user/{username}/billing/info": {
    /** User Billing Info */
    post: operations["user_billing_info_api_user__username__billing_info_post"];
  };
  "/api/user/{username}/billing/checkout_session": {
    /** User Checkout Session */
    post: operations["user_checkout_session_api_user__username__billing_checkout_session_post"];
  };
  "/api/user/{username}/billing/portal_session": {
    /** User Portal Session */
    post: operations["user_portal_session_api_user__username__billing_portal_session_post"];
  };
  "/api/users/list": {
    /** List Users */
    post: operations["list_users_api_users_list_post"];
  };
  "/api/users/get_my_user": {
    /** Get My User */
    post: operations["get_my_user_api_users_get_my_user_post"];
  };
  "/api/users/get_user": {
    /** Get User */
    post: operations["get_user_api_users_get_user_post"];
  };
  "/api/users/create": {
    /** Create User */
    post: operations["create_user_api_users_create_post"];
  };
  "/api/users/update": {
    /** Update User */
    post: operations["update_user_api_users_update_post"];
  };
  "/api/users/refresh_token": {
    /** Refresh Token */
    post: operations["refresh_token_api_users_refresh_token_post"];
  };
  "/api/users/delete": {
    /** Delete Users */
    post: operations["delete_users_api_users_delete_post"];
  };
  "/api/projects/list": {
    /**
     * List Projects
     * @description Returns all projects visible to user.
     * `members` and `backends` are always empty - call `/api/projects/{project_name}/get` to retrieve them.
     */
    post: operations["list_projects_api_projects_list_post"];
  };
  "/api/projects/create": {
    /** Create Project */
    post: operations["create_project_api_projects_create_post"];
  };
  "/api/projects/delete": {
    /** Delete Projects */
    post: operations["delete_projects_api_projects_delete_post"];
  };
  "/api/projects/{project_name}/get": {
    /** Get Project */
    post: operations["get_project_api_projects__project_name__get_post"];
  };
  "/api/projects/{project_name}/set_members": {
    /** Set Project Members */
    post: operations["set_project_members_api_projects__project_name__set_members_post"];
  };
  "/api/backends/list_types": {
    /** List Backend Types */
    post: operations["list_backend_types_api_backends_list_types_post"];
  };
  "/api/backends/config_values": {
    /** Get Backend Config Values */
    post: operations["get_backend_config_values_api_backends_config_values_post"];
  };
  "/api/project/{project_name}/backends/{backend_name}/config_info": {
    /** Get Backend Config Info */
    post: operations["get_backend_config_info_api_project__project_name__backends__backend_name__config_info_post"];
  };
  "/api/pools/list_instances": {
    /**
     * List Pool Instances
     * @description Returns all instances visible to user sorted by descending created_at.
     * A **project_name** and **pool_name** can be specified as filters.
     *
     * The results are paginated. To get the next page, pass created_at and id of
     * the last run from the previous page as **prev_created_at** and **prev_id**.
     */
    post: operations["list_pool_instances_api_pools_list_instances_post"];
  };
  "/api/project/{project_name}/pool/list": {
    /** List Pool */
    post: operations["list_pool_api_project__project_name__pool_list_post"];
  };
  "/api/project/{project_name}/pool/create": {
    /** Create Pool */
    post: operations["create_pool_api_project__project_name__pool_create_post"];
  };
  "/api/project/{project_name}/pool/set_default": {
    /** Set Default Pool */
    post: operations["set_default_pool_api_project__project_name__pool_set_default_post"];
  };
  "/api/project/{project_name}/pool/delete": {
    /** Delete Pool */
    post: operations["delete_pool_api_project__project_name__pool_delete_post"];
  };
  "/api/project/{project_name}/pool/show": {
    /** Show Pool */
    post: operations["show_pool_api_project__project_name__pool_show_post"];
  };
  "/api/project/{project_name}/pool/remove": {
    /** Remove Instance */
    post: operations["remove_instance_api_project__project_name__pool_remove_post"];
  };
  "/api/project/{project_name}/pool/add_remote": {
    /** Add Instance */
    post: operations["add_instance_api_project__project_name__pool_add_remote_post"];
  };
  "/api/project/{project_name}/fleets/list": {
    /** List Fleets */
    post: operations["list_fleets_api_project__project_name__fleets_list_post"];
  };
  "/api/project/{project_name}/fleets/get": {
    /** Get Fleet */
    post: operations["get_fleet_api_project__project_name__fleets_get_post"];
  };
  "/api/project/{project_name}/fleets/create": {
    /** Create Fleet */
    post: operations["create_fleet_api_project__project_name__fleets_create_post"];
  };
  "/api/project/{project_name}/fleets/delete": {
    /** Delete Fleets */
    post: operations["delete_fleets_api_project__project_name__fleets_delete_post"];
  };
  "/api/project/{project_name}/fleets/delete_instances": {
    /** Delete Fleet Instances */
    post: operations["delete_fleet_instances_api_project__project_name__fleets_delete_instances_post"];
  };
  "/api/project/{project_name}/repos/list": {
    /** List Repos */
    post: operations["list_repos_api_project__project_name__repos_list_post"];
  };
  "/api/project/{project_name}/repos/get": {
    /** Get Repo */
    post: operations["get_repo_api_project__project_name__repos_get_post"];
  };
  "/api/project/{project_name}/repos/init": {
    /** Init Repo */
    post: operations["init_repo_api_project__project_name__repos_init_post"];
  };
  "/api/project/{project_name}/repos/delete": {
    /** Delete Repos */
    post: operations["delete_repos_api_project__project_name__repos_delete_post"];
  };
  "/api/project/{project_name}/repos/upload_code": {
    /** Upload Code */
    post: operations["upload_code_api_project__project_name__repos_upload_code_post"];
  };
  "/api/runs/list": {
    /**
     * List Runs
     * @description Returns all runs visible to user sorted by descending submitted_at.
     * A **project_name**, **repo_id**, and **username** can be specified as filters.
     * Specifying **repo_id** without **project_name** returns no runs.
     *
     * The results are paginated. To get the next page, pass submitted_at and id of
     * the last run from the previous page as **prev_submitted_at** and **prev_run_id**.
     */
    post: operations["list_runs_api_runs_list_post"];
  };
  "/api/project/{project_name}/runs/get": {
    /** Get Run */
    post: operations["get_run_api_project__project_name__runs_get_post"];
  };
  "/api/project/{project_name}/runs/get_plan": {
    /** Get Run Plan */
    post: operations["get_run_plan_api_project__project_name__runs_get_plan_post"];
  };
  "/api/project/{project_name}/runs/submit": {
    /** Submit Run */
    post: operations["submit_run_api_project__project_name__runs_submit_post"];
  };
  "/api/project/{project_name}/runs/stop": {
    /** Stop Runs */
    post: operations["stop_runs_api_project__project_name__runs_stop_post"];
  };
  "/api/project/{project_name}/runs/delete": {
    /** Delete Runs */
    post: operations["delete_runs_api_project__project_name__runs_delete_post"];
  };
  "/api/project/{project_name}/runs/get_offers": {
    /** Get Offers */
    post: operations["get_offers_api_project__project_name__runs_get_offers_post"];
  };
  "/api/project/{project_name}/runs/create_instance": {
    /** Create Instance */
    post: operations["create_instance_api_project__project_name__runs_create_instance_post"];
  };
  "/api/project/{project_name}/logs/poll": {
    /** Poll Logs */
    post: operations["poll_logs_api_project__project_name__logs_poll_post"];
  };
  "/api/project/{project_name}/secrets/list": {
    /** List Secrets */
    post: operations["list_secrets_api_project__project_name__secrets_list_post"];
  };
  "/api/project/{project_name}/secrets/get": {
    /** Get Secret */
    post: operations["get_secret_api_project__project_name__secrets_get_post"];
  };
  "/api/project/{project_name}/secrets/add": {
    /** Add Or Update Secret */
    post: operations["add_or_update_secret_api_project__project_name__secrets_add_post"];
  };
  "/api/project/{project_name}/secrets/delete": {
    /** Delete Secrets */
    post: operations["delete_secrets_api_project__project_name__secrets_delete_post"];
  };
  "/api/project/{project_name}/gateways/list": {
    /** List Gateways */
    post: operations["list_gateways_api_project__project_name__gateways_list_post"];
  };
  "/api/project/{project_name}/gateways/get": {
    /** Get Gateway */
    post: operations["get_gateway_api_project__project_name__gateways_get_post"];
  };
  "/api/project/{project_name}/gateways/create": {
    /** Create Gateway */
    post: operations["create_gateway_api_project__project_name__gateways_create_post"];
  };
  "/api/project/{project_name}/gateways/delete": {
    /** Delete Gateways */
    post: operations["delete_gateways_api_project__project_name__gateways_delete_post"];
  };
  "/api/project/{project_name}/gateways/set_default": {
    /** Set Default Gateway */
    post: operations["set_default_gateway_api_project__project_name__gateways_set_default_post"];
  };
  "/api/project/{project_name}/gateways/set_wildcard_domain": {
    /** Set Gateway Wildcard Domain */
    post: operations["set_gateway_wildcard_domain_api_project__project_name__gateways_set_wildcard_domain_post"];
  };
  "/api/project/{project_name}/volumes/list": {
    /** List Volumes */
    post: operations["list_volumes_api_project__project_name__volumes_list_post"];
  };
  "/api/project/{project_name}/volumes/get": {
    /** Get Volume */
    post: operations["get_volume_api_project__project_name__volumes_get_post"];
  };
  "/api/project/{project_name}/volumes/create": {
    /** Create Volume */
    post: operations["create_volume_api_project__project_name__volumes_create_post"];
  };
  "/api/project/{project_name}/volumes/delete": {
    /** Delete Volumes */
    post: operations["delete_volumes_api_project__project_name__volumes_delete_post"];
  };
  "/healthcheck": {
    /** Healthcheck */
    get: operations["healthcheck_healthcheck_get"];
  };
}

export type webhooks = Record<string, never>;

declare interface components {
  schemas: {
    /** ACMGatewayCertificateRequest */
    ACMGatewayCertificateRequest: {
      /**
       * Type
       * @description Certificates by AWS Certificate Manager (ACM)
       * @default acm
       * @enum {string}
       */
      type?: "acm";
      /**
       * Arn
       * @description The ARN of the wildcard ACM certificate for the domain
       */
      arn: string;
    };
    /** AWSAccessKeyCredsRequest */
    AWSAccessKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default access_key
       * @enum {string}
       */
      type?: "access_key";
      /**
       * Access Key
       * @description The access key
       */
      access_key: string;
      /**
       * Secret Key
       * @description The secret key
       */
      secret_key: string;
    };
    /** AWSConfigInfoRequest */
    AWSConfigInfoRequest: {
      /**
       * Type
       * @default aws
       * @enum {string}
       */
      type?: "aws";
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Ids */
      vpc_ids?: {
        [key: string]: string;
      };
      /** Default Vpcs */
      default_vpcs?: boolean;
      /** Public Ips */
      public_ips?: boolean;
    };
    /** AWSConfigInfoWithCredsPartialRequest */
    AWSConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default aws
       * @enum {string}
       */
      type?: "aws";
      /** Creds */
      creds?: components["schemas"]["AWSAccessKeyCredsRequest"] | components["schemas"]["AWSDefaultCredsRequest"];
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Ids */
      vpc_ids?: {
        [key: string]: string;
      };
      /** Default Vpcs */
      default_vpcs?: boolean;
      /** Public Ips */
      public_ips?: boolean;
    };
    /** AWSConfigInfoWithCredsRequest */
    AWSConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default aws
       * @enum {string}
       */
      type?: "aws";
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Ids */
      vpc_ids?: {
        [key: string]: string;
      };
      /** Default Vpcs */
      default_vpcs?: boolean;
      /** Public Ips */
      public_ips?: boolean;
      /** Creds */
      creds: components["schemas"]["AWSAccessKeyCredsRequest"] | components["schemas"]["AWSDefaultCredsRequest"];
    };
    /** AWSConfigValuesRequest */
    AWSConfigValuesRequest: {
      /**
       * Type
       * @default aws
       * @enum {string}
       */
      type?: "aws";
      /**
       * Default Creds
       * @default false
       */
      default_creds?: boolean;
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** AWSDefaultCredsRequest */
    AWSDefaultCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default default
       * @enum {string}
       */
      type?: "default";
    };
    /** AddRemoteInstanceRequestRequest */
    AddRemoteInstanceRequestRequest: {
      /** Pool Name */
      pool_name?: string;
      /** Instance Name */
      instance_name?: string;
      /** Instance Network */
      instance_network?: string;
      /** Region */
      region?: string;
      /** Host */
      host: string;
      /** Port */
      port: number;
      /** Ssh User */
      ssh_user: string;
      /** Ssh Keys */
      ssh_keys: components["schemas"]["SSHKeyRequest"][];
    };
    /** AddSecretRequestRequest */
    AddSecretRequestRequest: {
      /** Repo Id */
      repo_id: string;
      secret: components["schemas"]["SecretRequest"];
    };
    /** AddUserManualPaymentRequest */
    AddUserManualPaymentRequest: {
      /** Value */
      value: number;
      /** Description */
      description?: string;
    };
    /** AppSpecRequest */
    AppSpecRequest: {
      /** Port */
      port: number;
      /** Map To Port */
      map_to_port?: number;
      /** App Name */
      app_name: string;
      /** Url Path */
      url_path?: string;
      /** Url Query Params */
      url_query_params?: {
        [key: string]: string;
      };
    };
    /** AuthorizeResponse */
    AuthorizeResponse: {
      /** Authorization Url */
      authorization_url: string;
    };
    /** AzureClientCredsRequest */
    AzureClientCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default client
       * @enum {string}
       */
      type?: "client";
      /**
       * Client Id
       * @description The client ID
       */
      client_id: string;
      /**
       * Client Secret
       * @description The client secret
       */
      client_secret: string;
      /** Tenant Id */
      tenant_id?: string;
    };
    /** AzureConfigInfoRequest */
    AzureConfigInfoRequest: {
      /**
       * Type
       * @default azure
       * @enum {string}
       */
      type?: "azure";
      /** Tenant Id */
      tenant_id: string;
      /** Subscription Id */
      subscription_id: string;
      /** Locations */
      locations?: string[];
    };
    /** AzureConfigInfoWithCredsPartialRequest */
    AzureConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default azure
       * @enum {string}
       */
      type?: "azure";
      /** Creds */
      creds?: components["schemas"]["AzureClientCredsRequest"] | components["schemas"]["AzureDefaultCredsRequest"];
      /** Tenant Id */
      tenant_id?: string;
      /** Subscription Id */
      subscription_id?: string;
      /** Locations */
      locations?: string[];
    };
    /** AzureConfigInfoWithCredsRequest */
    AzureConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default azure
       * @enum {string}
       */
      type?: "azure";
      /** Tenant Id */
      tenant_id: string;
      /** Subscription Id */
      subscription_id: string;
      /** Locations */
      locations?: string[];
      /** Creds */
      creds: components["schemas"]["AzureClientCredsRequest"] | components["schemas"]["AzureDefaultCredsRequest"];
    };
    /** AzureConfigValuesRequest */
    AzureConfigValuesRequest: {
      /**
       * Type
       * @default azure
       * @enum {string}
       */
      type?: "azure";
      /**
       * Default Creds
       * @default false
       */
      default_creds?: boolean;
      tenant_id?: components["schemas"]["ConfigElementRequest"];
      subscription_id?: components["schemas"]["ConfigElementRequest"];
      locations?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** AzureDefaultCredsRequest */
    AzureDefaultCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default default
       * @enum {string}
       */
      type?: "default";
    };
    /** BackendInfoRequest */
    BackendInfoRequest: {
      /** Name */
      name: string;
      /** Config */
      config: components["schemas"]["AWSConfigInfoRequest"] | components["schemas"]["AzureConfigInfoRequest"] | components["schemas"]["CudoConfigInfoRequest"] | components["schemas"]["DataCrunchConfigInfoRequest"] | components["schemas"]["GCPConfigInfoRequest"] | components["schemas"]["KubernetesConfigInfoRequest"] | components["schemas"]["LambdaConfigInfoRequest"] | components["schemas"]["NebiusConfigInfoRequest"] | components["schemas"]["OCIConfigInfoRequest"] | components["schemas"]["RunpodConfigInfoRequest"] | components["schemas"]["TensorDockConfigInfoRequest"] | components["schemas"]["VastAIConfigInfoRequest"] | components["schemas"]["DstackConfigInfoRequest"] | components["schemas"]["DstackBaseBackendConfigInfoRequest"];
    };
    /** BackendInfoYAMLRequest */
    BackendInfoYAMLRequest: {
      /** Name */
      name: string;
      /** Config Yaml */
      config_yaml: string;
    };
    /** BackendQuotaRequest */
    BackendQuotaRequest: {
      /** Name */
      name: string;
      /** Value */
      value: number;
    };
    /**
     * BackendType
     * @description Attributes:
     *     AWS (BackendType): Amazon Web Services
     *     AZURE (BackendType): Microsoft Azure
     *     CUDO (BackendType): Cudo
     *     DSTACK (BackendType): dstack Sky
     *     GCP (BackendType): Google Cloud Platform
     *     DATACRUNCH (BackendType): DataCrunch
     *     KUBERNETES (BackendType): Kubernetes
     *     LAMBDA (BackendType): Lambda Cloud
     *     RUNPOD (BackendType): Runpod Cloud
     *     TENSORDOCK (BackendType): TensorDock Marketplace
     *     VASTAI (BackendType): Vast.ai Marketplace
     * @enum {string}
     */
    BackendType: "aws" | "azure" | "cudo" | "datacrunch" | "dstack" | "gcp" | "kubernetes" | "lambda" | "local" | "remote" | "nebius" | "oci" | "runpod" | "tensordock" | "vastai";
    /** Body_upload_code_api_project__project_name__repos_upload_code_post */
    Body_upload_code_api_project__project_name__repos_upload_code_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
    };
    /** CallbackRequest */
    CallbackRequest: {
      /** Code */
      code: string;
    };
    /** CheckoutSessionInfo */
    CheckoutSessionInfo: {
      /** Url */
      url: string;
    };
    /** CheckoutSessionRequest */
    CheckoutSessionRequest: {
      /** Amount */
      amount: number;
    };
    /** ConfigElementRequest */
    ConfigElementRequest: {
      /** Selected */
      selected?: string;
      /**
       * Values
       * @default []
       */
      values?: components["schemas"]["ConfigElementValueRequest"][];
    };
    /** ConfigElementValueRequest */
    ConfigElementValueRequest: {
      /** Value */
      value: string;
      /** Label */
      label: string;
    };
    /** ConfigMultiElementRequest */
    ConfigMultiElementRequest: {
      /**
       * Selected
       * @default []
       */
      selected?: string[];
      /**
       * Values
       * @default []
       */
      values?: components["schemas"]["ConfigElementValueRequest"][];
    };
    /** CreateBackendYAMLRequestRequest */
    CreateBackendYAMLRequestRequest: {
      /** Config Yaml */
      config_yaml: string;
    };
    /** CreateFleetRequestRequest */
    CreateFleetRequestRequest: {
      spec: components["schemas"]["FleetSpecRequest"];
    };
    /** CreateGatewayRequestRequest */
    CreateGatewayRequestRequest: {
      /** Name */
      name?: string;
      backend_type?: components["schemas"]["BackendType"];
      /** Region */
      region?: string;
      configuration?: components["schemas"]["GatewayConfigurationRequest"];
    };
    /** CreateInstanceRequestRequest */
    CreateInstanceRequestRequest: {
      profile: components["schemas"]["ProfileRequest"];
      requirements: components["schemas"]["RequirementsRequest"];
    };
    /** CreatePoolRequestRequest */
    CreatePoolRequestRequest: {
      /** Name */
      name: string;
    };
    /** CreateProjectRequestRequest */
    CreateProjectRequestRequest: {
      /** Project Name */
      project_name: string;
    };
    /** CreateUserRequestRequest */
    CreateUserRequestRequest: {
      /** Username */
      username: string;
      global_role: components["schemas"]["GlobalRole"];
      /** Email */
      email?: string;
    };
    /** CreateVolumeRequestRequest */
    CreateVolumeRequestRequest: {
      configuration: components["schemas"]["VolumeConfigurationRequest"];
    };
    /**
     * CreationPolicy
     * @description An enumeration.
     * @enum {string}
     */
    CreationPolicy: "reuse" | "reuse-or-create";
    /** CudoAPIKeyCredsRequest */
    CudoAPIKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /**
       * Api Key
       * @description The API key
       */
      api_key: string;
    };
    /** CudoConfigInfoRequest */
    CudoConfigInfoRequest: {
      /**
       * Type
       * @default cudo
       * @enum {string}
       */
      type?: "cudo";
      /** Project Id */
      project_id: string;
      /** Regions */
      regions?: string[];
    };
    /** CudoConfigInfoWithCredsPartialRequest */
    CudoConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default cudo
       * @enum {string}
       */
      type?: "cudo";
      creds?: components["schemas"]["CudoAPIKeyCredsRequest"];
      /** Project Id */
      project_id?: string;
      /** Regions */
      regions?: string[];
    };
    /** CudoConfigInfoWithCredsRequest */
    CudoConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default cudo
       * @enum {string}
       */
      type?: "cudo";
      /** Project Id */
      project_id: string;
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["CudoAPIKeyCredsRequest"];
    };
    /** CudoConfigValuesRequest */
    CudoConfigValuesRequest: {
      /**
       * Type
       * @default cudo
       * @enum {string}
       */
      type?: "cudo";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
      project_id?: components["schemas"]["ConfigElementRequest"];
    };
    /** DataCrunchAPIKeyCredsRequest */
    DataCrunchAPIKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /**
       * Client Id
       * @description The client ID
       */
      client_id: string;
      /**
       * Client Secret
       * @description The client secret
       */
      client_secret: string;
    };
    /** DataCrunchConfigInfoRequest */
    DataCrunchConfigInfoRequest: {
      /**
       * Type
       * @default datacrunch
       * @enum {string}
       */
      type?: "datacrunch";
      /** Regions */
      regions?: string[];
    };
    /** DataCrunchConfigInfoWithCredsPartialRequest */
    DataCrunchConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default datacrunch
       * @enum {string}
       */
      type?: "datacrunch";
      creds?: components["schemas"]["DataCrunchAPIKeyCredsRequest"];
      /** Regions */
      regions?: string[];
    };
    /** DataCrunchConfigInfoWithCredsRequest */
    DataCrunchConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default datacrunch
       * @enum {string}
       */
      type?: "datacrunch";
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["DataCrunchAPIKeyCredsRequest"];
    };
    /** DataCrunchConfigValuesRequest */
    DataCrunchConfigValuesRequest: {
      /**
       * Type
       * @default datacrunch
       * @enum {string}
       */
      type?: "datacrunch";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** DeleteBackendsRequestRequest */
    DeleteBackendsRequestRequest: {
      backends_names: components["schemas"]["BackendType"][];
    };
    /** DeleteFleetInstancesRequestRequest */
    DeleteFleetInstancesRequestRequest: {
      /** Name */
      name: string;
      /** Instance Nums */
      instance_nums: number[];
    };
    /** DeleteFleetsRequestRequest */
    DeleteFleetsRequestRequest: {
      /** Names */
      names: string[];
    };
    /** DeleteGatewaysRequestRequest */
    DeleteGatewaysRequestRequest: {
      /** Names */
      names: string[];
    };
    /** DeletePoolRequestRequest */
    DeletePoolRequestRequest: {
      /** Name */
      name: string;
      /** Force */
      force: boolean;
    };
    /** DeleteProjectsRequestRequest */
    DeleteProjectsRequestRequest: {
      /** Projects Names */
      projects_names: string[];
    };
    /** DeleteReposRequestRequest */
    DeleteReposRequestRequest: {
      /** Repos Ids */
      repos_ids: string[];
    };
    /** DeleteRunsRequestRequest */
    DeleteRunsRequestRequest: {
      /** Runs Names */
      runs_names: string[];
    };
    /** DeleteSecretsRequestRequest */
    DeleteSecretsRequestRequest: {
      /** Repo Id */
      repo_id: string;
      /** Secrets Names */
      secrets_names: string[];
    };
    /** DeleteUsersRequestRequest */
    DeleteUsersRequestRequest: {
      /** Users */
      users: string[];
    };
    /** DeleteVolumesRequestRequest */
    DeleteVolumesRequestRequest: {
      /** Names */
      names: string[];
    };
    /** DevEnvironmentConfigurationRequest */
    DevEnvironmentConfigurationRequest: {
      /**
       * Ide
       * @description The IDE to run
       * @enum {string}
       */
      ide: "vscode";
      /**
       * Version
       * @description The version of the IDE
       */
      version?: string;
      /**
       * Init
       * @description The bash commands to run
       * @default []
       */
      init?: string[];
      /**
       * Type
       * @default dev-environment
       * @enum {string}
       */
      type?: "dev-environment";
      /**
       * Name
       * @description The run name
       */
      name?: string;
      /**
       * Image
       * @description The name of the Docker image to run
       */
      image?: string;
      /**
       * Entrypoint
       * @description The Docker entrypoint
       */
      entrypoint?: string;
      /**
       * Working Dir
       * @description The path to the working directory inside the container. It's specified relative to the repository directory (`/workflow`) and should be inside it. Defaults to `"."`
       */
      working_dir?: string;
      /**
       * Home Dir
       * @description The absolute path to the home directory inside the container. Defaults to `/root`
       * @default /root
       */
      home_dir?: string;
      /**
       * Registry Auth
       * @description Credentials for pulling a private Docker image
       */
      registry_auth?: components["schemas"]["RegistryAuthRequest"];
      /** @description The major version of Python. Mutually exclusive with `image` */
      python?: components["schemas"]["PythonVersion"];
      /**
       * Env
       * @description The mapping or the list of environment variables
       * @default {}
       */
      env?: string[] | ({
        [key: string]: string | components["schemas"]["EnvSentinelRequest"];
      });
      /**
       * Setup
       * @description The bash commands to run on the boot
       * @default []
       */
      setup?: string[];
      /**
       * Resources
       * @description The resources requirements to run the configuration
       * @default {
       *   "cpu": {
       *     "min": 2
       *   },
       *   "memory": {
       *     "min": 8
       *   },
       *   "disk": {
       *     "size": {
       *       "min": 100
       *     }
       *   }
       * }
       */
      resources?: components["schemas"]["ResourcesSpecRequest"];
      /**
       * Volumes
       * @description The volumes mount points
       * @default []
       */
      volumes?: components["schemas"]["VolumeMountPointRequest"][];
      /**
       * Ports
       * @description Port numbers/mapping to expose
       * @default []
       */
      ports?: (number | string | components["schemas"]["PortMappingRequest"])[];
      /** @description The backends to consider for provisioning (e.g., `[aws, gcp]`) */
      backends?: components["schemas"]["BackendType"][];
      /**
       * Regions
       * @description The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)
       */
      regions?: string[];
      /**
       * Instance Types
       * @description The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)
       */
      instance_types?: string[];
      /** @description The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto` */
      spot_policy?: components["schemas"]["SpotPolicy"];
      /**
       * Retry
       * @description The policy for resubmitting the run. Defaults to `false`
       */
      retry?: components["schemas"]["ProfileRetryRequest"] | boolean;
      /**
       * Retry Policy
       * @description The policy for resubmitting the run. Deprecated in favor of `retry`
       */
      retry_policy?: components["schemas"]["ProfileRetryPolicyRequest"];
      /**
       * Max Duration
       * @description The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`
       */
      max_duration?: "off" | string | number;
      /**
       * Max Price
       * @description The maximum instance price per hour, in dollars
       */
      max_price?: number;
      /**
       * Pool Name
       * @description The name of the pool. If not set, dstack will use the default name
       */
      pool_name?: string;
      /**
       * Instance Name
       * @description The name of the instance
       */
      instance_name?: string;
      /** @description The policy for using instances from the pool. Defaults to `reuse-or-create` */
      creation_policy?: components["schemas"]["CreationPolicy"];
      /** @description The policy for instance termination. Defaults to `destroy-after-idle` */
      termination_policy?: components["schemas"]["TerminationPolicy"];
      /**
       * Termination Idle Time
       * @description Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`
       */
      termination_idle_time?: number | string;
    };
    /** DiskRequest */
    DiskRequest: {
      /** Size Mib */
      size_mib: number;
    };
    /** DiskSpecRequest */
    DiskSpecRequest: {
      /**
       * Size
       * @description Disk size
       */
      size: components["schemas"]["Range_Memory_"];
    };
    /** DstackBaseBackendConfigInfoRequest */
    DstackBaseBackendConfigInfoRequest: {
      /** Type */
      type: string;
    };
    /**
     * DstackConfigInfoRequest
     * @description This is a config model of DstackBackend stored in BackendModel.config and used by DstackConfigurator.
     */
    DstackConfigInfoRequest: {
      /**
       * Type
       * @default dstack
       * @enum {string}
       */
      type?: "dstack";
      /** Base Backends */
      base_backends: string[];
    };
    /** DstackConfigValuesRequest */
    DstackConfigValuesRequest: {
      /**
       * Type
       * @default dstack
       * @enum {string}
       */
      type?: "dstack";
    };
    /** EnvSentinelRequest */
    EnvSentinelRequest: {
      /** Key */
      key: string;
    };
    /** FleetConfigurationRequest */
    FleetConfigurationRequest: {
      /**
       * Type
       * @default fleet
       * @enum {string}
       */
      type?: "fleet";
      /**
       * Name
       * @description The fleet name
       */
      name?: string;
      /**
       * Ssh Config
       * @description The parameters for adding instances via SSH
       */
      ssh_config?: components["schemas"]["SSHParamsRequest"];
      /**
       * Nodes
       * @description The number of instances
       */
      nodes?: components["schemas"]["Range_int_"];
      /** @description The placement of instances: `any` or `cluster` */
      placement?: components["schemas"]["InstanceGroupPlacement"];
      /**
       * Resources
       * @description The resources requirements
       * @default {
       *   "cpu": {
       *     "min": 2
       *   },
       *   "memory": {
       *     "min": 8
       *   },
       *   "disk": {
       *     "size": {
       *       "min": 100
       *     }
       *   }
       * }
       */
      resources?: components["schemas"]["ResourcesSpecRequest"];
      /** @description The backends to consider for provisioning (e.g., `[aws, gcp]`) */
      backends?: components["schemas"]["BackendType"][];
      /**
       * Regions
       * @description The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)
       */
      regions?: string[];
      /**
       * Instance Types
       * @description The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)
       */
      instance_types?: string[];
      /** @description The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto` */
      spot_policy?: components["schemas"]["SpotPolicy"];
      /**
       * Retry
       * @description The policy for provisioning retry. Defaults to `false`
       */
      retry?: components["schemas"]["ProfileRetryRequest"] | boolean;
      /**
       * Max Price
       * @description The maximum instance price per hour, in dollars
       */
      max_price?: number;
      /** @description The policy for instance termination. Defaults to `destroy-after-idle` */
      termination_policy?: components["schemas"]["TerminationPolicy"];
      /**
       * Termination Idle Time
       * @description Time to wait before destroying idle instances. Defaults to `3d`
       */
      termination_idle_time?: number | string;
    };
    /** FleetRequest */
    FleetRequest: {
      /** Name */
      name: string;
      /** Project Name */
      project_name: string;
      spec: components["schemas"]["FleetSpecRequest"];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      status: components["schemas"]["FleetStatus"];
      /** Status Message */
      status_message?: string;
      /** Instances */
      instances: components["schemas"]["InstanceRequest"][];
    };
    /** FleetSpecRequest */
    FleetSpecRequest: {
      configuration: components["schemas"]["FleetConfigurationRequest"];
      profile: components["schemas"]["ProfileRequest"];
      /**
       * Autocreated
       * @default false
       */
      autocreated?: boolean;
    };
    /**
     * FleetStatus
     * @description An enumeration.
     * @enum {string}
     */
    FleetStatus: "submitted" | "active" | "terminating" | "terminated" | "failed";
    /** GCPConfigInfoRequest */
    GCPConfigInfoRequest: {
      /**
       * Type
       * @default gcp
       * @enum {string}
       */
      type?: "gcp";
      /** Project Id */
      project_id: string;
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Project Id */
      vpc_project_id?: string;
      /** Public Ips */
      public_ips?: boolean;
    };
    /** GCPConfigInfoWithCredsPartialRequest */
    GCPConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default gcp
       * @enum {string}
       */
      type?: "gcp";
      /** Creds */
      creds?: components["schemas"]["GCPServiceAccountCredsRequest"] | components["schemas"]["GCPDefaultCredsRequest"];
      /** Project Id */
      project_id?: string;
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Project Id */
      vpc_project_id?: string;
      /** Public Ips */
      public_ips?: boolean;
    };
    /** GCPConfigInfoWithCredsRequest */
    GCPConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default gcp
       * @enum {string}
       */
      type?: "gcp";
      /** Project Id */
      project_id: string;
      /** Regions */
      regions?: string[];
      /** Vpc Name */
      vpc_name?: string;
      /** Vpc Project Id */
      vpc_project_id?: string;
      /** Public Ips */
      public_ips?: boolean;
      /** Creds */
      creds: components["schemas"]["GCPServiceAccountCredsRequest"] | components["schemas"]["GCPDefaultCredsRequest"];
    };
    /** GCPConfigValuesRequest */
    GCPConfigValuesRequest: {
      /**
       * Type
       * @default gcp
       * @enum {string}
       */
      type?: "gcp";
      /**
       * Default Creds
       * @default false
       */
      default_creds?: boolean;
      project_id?: components["schemas"]["ConfigElementRequest"];
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** GCPDefaultCredsRequest */
    GCPDefaultCredsRequest: {
      /**
       * Type
       * @default default
       * @enum {string}
       */
      type?: "default";
    };
    /** GCPServiceAccountCredsRequest */
    GCPServiceAccountCredsRequest: {
      /**
       * Type
       * @default service_account
       * @enum {string}
       */
      type?: "service_account";
      /** Filename */
      filename: string;
      /** Data */
      data: string;
    };
    /** GPUSpecRequest */
    GPUSpecRequest: {
      /**
       * Name
       * @description The name of the GPU (e.g., `A100` or `H100`)
       */
      name?: string[];
      /**
       * Count
       * @description The number of GPUs
       * @default {
       *   "min": 1,
       *   "max": 1
       * }
       */
      count?: components["schemas"]["Range_int_"];
      /**
       * Memory
       * @description The RAM size (e.g., `16GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)
       */
      memory?: components["schemas"]["Range_Memory_"];
      /**
       * Total Memory
       * @description The total RAM size (e.g., `32GB`). Can be set to a range (e.g. `16GB..`, or `16GB..80GB`)
       */
      total_memory?: components["schemas"]["Range_Memory_"];
      /**
       * Compute Capability
       * @description The minimum compute capability of the GPU (e.g., `7.5`)
       */
      compute_capability?: unknown[];
    };
    /** GatewayConfigurationRequest */
    GatewayConfigurationRequest: {
      /**
       * Type
       * @default gateway
       * @enum {string}
       */
      type?: "gateway";
      /**
       * Name
       * @description The gateway name
       */
      name?: string;
      /**
       * Default
       * @description Make the gateway default
       * @default false
       */
      default?: boolean;
      /** @description The gateway backend */
      backend: components["schemas"]["BackendType"];
      /**
       * Region
       * @description The gateway region
       */
      region: string;
      /**
       * Domain
       * @description The gateway domain, e.g. `example.com`
       */
      domain?: string;
      /**
       * Public Ip
       * @description Allocate public IP for the gateway
       * @default true
       */
      public_ip?: boolean;
      /**
       * Certificate
       * @description The SSL certificate configuration. Defaults to `type: lets-encrypt`
       * @default {
       *   "type": "lets-encrypt"
       * }
       */
      certificate?: components["schemas"]["LetsEncryptGatewayCertificateRequest"] | components["schemas"]["ACMGatewayCertificateRequest"];
    };
    /** GatewayRequest */
    GatewayRequest: {
      /** Name */
      name: string;
      configuration: components["schemas"]["GatewayConfigurationRequest"];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      status: components["schemas"]["GatewayStatus"];
      /** Status Message */
      status_message?: string;
      /** Hostname */
      hostname?: string;
      /** Ip Address */
      ip_address?: string;
      /** Instance Id */
      instance_id?: string;
      backend: components["schemas"]["BackendType"];
      /** Region */
      region: string;
      /** Default */
      default: boolean;
      /** Wildcard Domain */
      wildcard_domain?: string;
    };
    /**
     * GatewayStatus
     * @description An enumeration.
     * @enum {string}
     */
    GatewayStatus: "submitted" | "provisioning" | "running" | "failed";
    /** GetFleetRequestRequest */
    GetFleetRequestRequest: {
      /** Name */
      name: string;
    };
    /** GetGatewayRequestRequest */
    GetGatewayRequestRequest: {
      /** Name */
      name: string;
    };
    /** GetOffersRequestRequest */
    GetOffersRequestRequest: {
      profile: components["schemas"]["ProfileRequest"];
      requirements: components["schemas"]["RequirementsRequest"];
    };
    /** GetRepoRequestRequest */
    GetRepoRequestRequest: {
      /** Repo Id */
      repo_id: string;
      /** Include Creds */
      include_creds: boolean;
    };
    /** GetRunPlanRequestRequest */
    GetRunPlanRequestRequest: {
      run_spec: components["schemas"]["RunSpecRequest"];
    };
    /** GetRunRequestRequest */
    GetRunRequestRequest: {
      /** Run Name */
      run_name: string;
    };
    /** GetSecretsRequestRequest */
    GetSecretsRequestRequest: {
      /** Repo Id */
      repo_id: string;
    };
    /** GetUserRequestRequest */
    GetUserRequestRequest: {
      /** Username */
      username: string;
    };
    /** GetVolumeRequestRequest */
    GetVolumeRequestRequest: {
      /** Name */
      name: string;
    };
    /**
     * GlobalRole
     * @description An enumeration.
     * @enum {string}
     */
    GlobalRole: "admin" | "user";
    /** GpuRequest */
    GpuRequest: {
      /** Name */
      name: string;
      /** Memory Mib */
      memory_mib: number;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /**
     * InstanceAvailability
     * @description An enumeration.
     * @enum {unknown}
     */
    InstanceAvailability: "unknown" | "available" | "not_available" | "no_quota" | "idle" | "busy";
    /**
     * InstanceGroupPlacement
     * @description An enumeration.
     * @enum {string}
     */
    InstanceGroupPlacement: "any" | "cluster";
    /** InstanceOfferWithAvailabilityRequest */
    InstanceOfferWithAvailabilityRequest: {
      backend: components["schemas"]["BackendType"];
      instance: components["schemas"]["InstanceTypeRequest"];
      /** Region */
      region: string;
      /** Price */
      price: number;
      availability: components["schemas"]["InstanceAvailability"];
      /** @default shim */
      instance_runtime?: components["schemas"]["InstanceRuntime"];
    };
    /** InstanceRequest */
    InstanceRequest: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      /** Project Name */
      project_name: string;
      backend?: components["schemas"]["BackendType"];
      instance_type?: components["schemas"]["InstanceTypeRequest"];
      /** Name */
      name: string;
      /** Instance Num */
      instance_num: number;
      /** Pool Name */
      pool_name?: string;
      /** Job Name */
      job_name?: string;
      /** Hostname */
      hostname?: string;
      status: components["schemas"]["InstanceStatus"];
      /**
       * Unreachable
       * @default false
       */
      unreachable?: boolean;
      /**
       * Created
       * Format: date-time
       */
      created: string;
      /** Region */
      region?: string;
      /** Price */
      price?: number;
    };
    /**
     * InstanceRuntime
     * @description An enumeration.
     * @enum {unknown}
     */
    InstanceRuntime: "shim" | "runner";
    /**
     * InstanceStatus
     * @description An enumeration.
     * @enum {string}
     */
    InstanceStatus: "pending" | "provisioning" | "idle" | "busy" | "terminating" | "terminated";
    /** InstanceTypeRequest */
    InstanceTypeRequest: {
      /** Name */
      name: string;
      resources: components["schemas"]["ResourcesRequest"];
    };
    /** JobPlanRequest */
    JobPlanRequest: {
      job_spec: components["schemas"]["JobSpecRequest"];
      /** Offers */
      offers: components["schemas"]["InstanceOfferWithAvailabilityRequest"][];
      /** Total Offers */
      total_offers: number;
      /** Max Price */
      max_price?: number;
    };
    /** JobProvisioningDataRequest */
    JobProvisioningDataRequest: {
      backend: components["schemas"]["BackendType"];
      instance_type: components["schemas"]["InstanceTypeRequest"];
      /** Instance Id */
      instance_id: string;
      /** Hostname */
      hostname?: string;
      /** Internal Ip */
      internal_ip?: string;
      /**
       * Public Ip Enabled
       * @default true
       */
      public_ip_enabled?: boolean;
      /** Instance Network */
      instance_network?: string;
      /** Region */
      region: string;
      /** Availability Zone */
      availability_zone?: string;
      /** Price */
      price: number;
      /** Username */
      username: string;
      /** Ssh Port */
      ssh_port?: number;
      /** Dockerized */
      dockerized: boolean;
      ssh_proxy?: components["schemas"]["SSHConnectionParamsRequest"];
      /** Backend Data */
      backend_data?: string;
    };
    /** JobRequest */
    JobRequest: {
      job_spec: components["schemas"]["JobSpecRequest"];
      /** Job Submissions */
      job_submissions: components["schemas"]["JobSubmissionRequest"][];
    };
    /** JobSpecRequest */
    JobSpecRequest: {
      /**
       * Replica Num
       * @default 0
       */
      replica_num?: number;
      /** Job Num */
      job_num: number;
      /** Job Name */
      job_name: string;
      /**
       * Jobs Per Replica
       * @default 1
       */
      jobs_per_replica?: number;
      /** App Specs */
      app_specs?: components["schemas"]["AppSpecRequest"][];
      /** Commands */
      commands: string[];
      /** Env */
      env: {
        [key: string]: string;
      };
      /** Home Dir */
      home_dir?: string;
      /** Image Name */
      image_name: string;
      /** Max Duration */
      max_duration?: number;
      registry_auth?: components["schemas"]["RegistryAuthRequest"];
      requirements: components["schemas"]["RequirementsRequest"];
      retry?: components["schemas"]["RetryRequest"];
      /**
       * Retry Policy
       * @default {
       *   "retry": false
       * }
       */
      retry_policy?: components["schemas"]["ProfileRetryPolicyRequest"];
      /** Working Dir */
      working_dir?: string;
    };
    /**
     * JobStatus
     * @description An enumeration.
     * @enum {string}
     */
    JobStatus: "submitted" | "provisioning" | "pulling" | "running" | "terminating" | "terminated" | "aborted" | "failed" | "done";
    /** JobSubmissionLogsRequest */
    JobSubmissionLogsRequest: {
      /** Logs */
      logs: components["schemas"]["LogEventRequest"][];
    };
    /** JobSubmissionRequest */
    JobSubmissionRequest: {
      /**
       * Id
       * Format: uuid4
       */
      id: string;
      /** Submission Num */
      submission_num: number;
      /**
       * Submitted At
       * Format: date-time
       */
      submitted_at: string;
      /**
       * Last Processed At
       * Format: date-time
       */
      last_processed_at: string;
      /**
       * Finished At
       * Format: date-time
       */
      finished_at?: string;
      status: components["schemas"]["JobStatus"];
      termination_reason?: components["schemas"]["JobTerminationReason"];
      /** Termination Reason Message */
      termination_reason_message?: string;
      job_provisioning_data?: components["schemas"]["JobProvisioningDataRequest"];
    };
    /**
     * JobTerminationReason
     * @description An enumeration.
     * @enum {string}
     */
    JobTerminationReason: "failed_to_start_due_to_no_capacity" | "interrupted_by_no_capacity" | "waiting_instance_limit_exceeded" | "waiting_runner_limit_exceeded" | "terminated_by_user" | "volume_error" | "gateway_error" | "scaled_down" | "done_by_runner" | "aborted_by_user" | "terminated_by_server" | "container_exited_with_error" | "ports_binding_failed" | "creating_container_error" | "executor_error";
    /** KubeconfigConfigRequest */
    KubeconfigConfigRequest: {
      /** Filename */
      filename: string;
      /** Data */
      data: string;
    };
    /** KubernetesConfigInfoRequest */
    KubernetesConfigInfoRequest: {
      /**
       * Type
       * @default kubernetes
       * @enum {string}
       */
      type?: "kubernetes";
      networking: components["schemas"]["KubernetesNetworkingConfigRequest"];
    };
    /** KubernetesConfigInfoWithCredsPartialRequest */
    KubernetesConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default kubernetes
       * @enum {string}
       */
      type?: "kubernetes";
      networking: components["schemas"]["KubernetesNetworkingConfigRequest"];
      kubeconfig: components["schemas"]["KubeconfigConfigRequest"];
    };
    /** KubernetesConfigInfoWithCredsRequest */
    KubernetesConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default kubernetes
       * @enum {string}
       */
      type?: "kubernetes";
      networking: components["schemas"]["KubernetesNetworkingConfigRequest"];
      kubeconfig: components["schemas"]["KubeconfigConfigRequest"];
    };
    /** KubernetesConfigValuesRequest */
    KubernetesConfigValuesRequest: {
      /**
       * Type
       * @default kubernetes
       * @enum {string}
       */
      type?: "kubernetes";
    };
    /** KubernetesNetworkingConfigRequest */
    KubernetesNetworkingConfigRequest: {
      /**
       * Ssh Host
       * @description The external IP address of any node
       */
      ssh_host?: string;
      /**
       * Ssh Port
       * @description Any port accessible outside of the cluster
       */
      ssh_port?: number;
    };
    /** LambdaAPIKeyCredsRequest */
    LambdaAPIKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /**
       * Api Key
       * @description The API key
       */
      api_key: string;
    };
    /** LambdaConfigInfoRequest */
    LambdaConfigInfoRequest: {
      /**
       * Type
       * @default lambda
       * @enum {string}
       */
      type?: "lambda";
      /** Regions */
      regions?: string[];
    };
    /** LambdaConfigInfoWithCredsPartialRequest */
    LambdaConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default lambda
       * @enum {string}
       */
      type?: "lambda";
      creds?: components["schemas"]["LambdaAPIKeyCredsRequest"];
      /** Regions */
      regions?: string[];
    };
    /** LambdaConfigInfoWithCredsRequest */
    LambdaConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default lambda
       * @enum {string}
       */
      type?: "lambda";
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["LambdaAPIKeyCredsRequest"];
    };
    /** LambdaConfigValuesRequest */
    LambdaConfigValuesRequest: {
      /**
       * Type
       * @default lambda
       * @enum {string}
       */
      type?: "lambda";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** LetsEncryptGatewayCertificateRequest */
    LetsEncryptGatewayCertificateRequest: {
      /**
       * Type
       * @description Automatic certificates by Let's Encrypt
       * @default lets-encrypt
       * @enum {string}
       */
      type?: "lets-encrypt";
    };
    /** ListPoolsRequestRequest */
    ListPoolsRequestRequest: {
      /** Project Name */
      project_name?: string;
      /** Pool Name */
      pool_name?: string;
      /**
       * Only Active
       * @default false
       */
      only_active?: boolean;
      /**
       * Prev Created At
       * Format: date-time
       */
      prev_created_at?: string;
      /**
       * Prev Id
       * Format: uuid
       */
      prev_id?: string;
      /**
       * Limit
       * @default 1000
       */
      limit?: number;
      /**
       * Ascending
       * @default false
       */
      ascending?: boolean;
    };
    /** ListRunsRequestRequest */
    ListRunsRequestRequest: {
      /** Project Name */
      project_name?: string;
      /** Repo Id */
      repo_id?: string;
      /** Username */
      username?: string;
      /**
       * Only Active
       * @default false
       */
      only_active?: boolean;
      /**
       * Prev Submitted At
       * Format: date-time
       */
      prev_submitted_at?: string;
      /**
       * Prev Run Id
       * Format: uuid
       */
      prev_run_id?: string;
      /**
       * Limit
       * @default 100
       */
      limit?: number;
      /**
       * Ascending
       * @default false
       */
      ascending?: boolean;
    };
    /** ListSecretsRequestRequest */
    ListSecretsRequestRequest: {
      /** Repo Id */
      repo_id: string;
    };
    /** LocalRepoInfoRequest */
    LocalRepoInfoRequest: {
      /**
       * Repo Type
       * @default local
       * @enum {string}
       */
      repo_type?: "local";
      /** Repo Dir */
      repo_dir: string;
    };
    /** LocalRunRepoDataRequest */
    LocalRunRepoDataRequest: {
      /**
       * Repo Type
       * @default local
       * @enum {string}
       */
      repo_type?: "local";
      /** Repo Dir */
      repo_dir: string;
    };
    /** LogEventRequest */
    LogEventRequest: {
      /**
       * Timestamp
       * Format: date-time
       */
      timestamp: string;
      log_source: components["schemas"]["LogEventSource"];
      /** Message */
      message: string;
    };
    /**
     * LogEventSource
     * @description An enumeration.
     * @enum {string}
     */
    LogEventSource: "stdout" | "stderr";
    /** MemberRequest */
    MemberRequest: {
      user: components["schemas"]["UserRequest"];
      project_role: components["schemas"]["ProjectRole"];
    };
    /** MemberSettingRequest */
    MemberSettingRequest: {
      /** Username */
      username: string;
      project_role: components["schemas"]["ProjectRole"];
    };
    /** NebiusConfigInfoRequest */
    NebiusConfigInfoRequest: {
      /**
       * Type
       * @default nebius
       * @enum {string}
       */
      type?: "nebius";
      /** Cloud Id */
      cloud_id: string;
      /** Folder Id */
      folder_id: string;
      /** Network Id */
      network_id: string;
      /** Regions */
      regions?: string[];
    };
    /** NebiusConfigInfoWithCredsPartialRequest */
    NebiusConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default nebius
       * @enum {string}
       */
      type?: "nebius";
      creds?: components["schemas"]["NebiusServiceAccountCredsRequest"];
      /** Cloud Id */
      cloud_id?: string;
      /** Folder Id */
      folder_id?: string;
      /** Network Id */
      network_id?: string;
      /** Regions */
      regions?: string[];
    };
    /** NebiusConfigInfoWithCredsRequest */
    NebiusConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default nebius
       * @enum {string}
       */
      type?: "nebius";
      /** Cloud Id */
      cloud_id: string;
      /** Folder Id */
      folder_id: string;
      /** Network Id */
      network_id: string;
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["NebiusServiceAccountCredsRequest"];
    };
    /** NebiusConfigValuesRequest */
    NebiusConfigValuesRequest: {
      /**
       * Type
       * @default nebius
       * @enum {string}
       */
      type?: "nebius";
      cloud_id?: components["schemas"]["ConfigElementRequest"];
      folder_id?: components["schemas"]["ConfigElementRequest"];
      network_id?: components["schemas"]["ConfigElementRequest"];
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** NebiusServiceAccountCredsRequest */
    NebiusServiceAccountCredsRequest: {
      /**
       * Type
       * @default service_account
       * @enum {string}
       */
      type?: "service_account";
      /** Filename */
      filename: string;
      /** Data */
      data: string;
    };
    /** OCIClientCredsRequest */
    OCIClientCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default client
       * @enum {string}
       */
      type?: "client";
      /**
       * User
       * @description User OCID
       */
      user: string;
      /**
       * Tenancy
       * @description Tenancy OCID
       */
      tenancy: string;
      /**
       * Key File
       * @description Path to the user's private PEM key. Either this or `key_content` should be set
       */
      key_file?: string;
      /**
       * Key Content
       * @description Content of the user's private PEM key. Either this or `key_file` should be set
       */
      key_content?: string;
      /**
       * Pass Phrase
       * @description Passphrase for the private PEM key if it is encrypted
       */
      pass_phrase?: string;
      /**
       * Fingerprint
       * @description User's public key fingerprint
       */
      fingerprint: string;
      /**
       * Region
       * @description Name or key of any region the tenancy is subscribed to
       */
      region: string;
    };
    /** OCIConfigInfoRequest */
    OCIConfigInfoRequest: {
      /**
       * Type
       * @default oci
       * @enum {string}
       */
      type?: "oci";
      /** Regions */
      regions?: string[];
      /** Compartment Id */
      compartment_id?: string;
    };
    /** OCIConfigInfoWithCredsPartialRequest */
    OCIConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default oci
       * @enum {string}
       */
      type?: "oci";
      /** Creds */
      creds?: components["schemas"]["OCIClientCredsRequest"] | components["schemas"]["OCIDefaultCredsRequest"];
      /** Regions */
      regions?: string[];
      /** Compartment Id */
      compartment_id?: string;
    };
    /** OCIConfigInfoWithCredsRequest */
    OCIConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default oci
       * @enum {string}
       */
      type?: "oci";
      /** Regions */
      regions?: string[];
      /** Compartment Id */
      compartment_id?: string;
      /** Creds */
      creds: components["schemas"]["OCIClientCredsRequest"] | components["schemas"]["OCIDefaultCredsRequest"];
    };
    /** OCIConfigValuesRequest */
    OCIConfigValuesRequest: {
      /**
       * Type
       * @default oci
       * @enum {string}
       */
      type?: "oci";
      /**
       * Default Creds
       * @default false
       */
      default_creds?: boolean;
      regions?: components["schemas"]["ConfigMultiElementRequest"];
      /** Compartment Id */
      compartment_id?: string;
    };
    /** OCIDefaultCredsRequest */
    OCIDefaultCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default default
       * @enum {string}
       */
      type?: "default";
      /**
       * File
       * @description Path to the OCI CLI-compatible config file
       * @default ~/.oci/config
       */
      file?: string;
      /**
       * Profile
       * @description Profile to load from the config file
       * @default DEFAULT
       */
      profile?: string;
    };
    /**
     * OpenAIChatModelRequest
     * @description Mapping of the model for the OpenAI-compatible endpoint.
     *
     * Attributes:
     *     type (str): The type of the model, e.g. "chat"
     *     name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.
     *     format (str): The format of the model, i.e. "openai".
     *     prefix (str): The `base_url` prefix: `http://hostname/{prefix}/chat/completions`. Defaults to `/v1`.
     */
    OpenAIChatModelRequest: {
      /**
       * Type
       * @description The type of the model
       * @enum {string}
       */
      type: "chat";
      /**
       * Name
       * @description The name of the model
       */
      name: string;
      /**
       * Format
       * @enum {string}
       */
      format: "openai";
      /**
       * Prefix
       * @description The `base_url` prefix (after hostname)
       * @default /v1
       */
      prefix?: string;
    };
    /** Payment */
    Payment: {
      /**
       * Id
       * Format: uuid
       */
      id: string;
      type: components["schemas"]["PaymentType"];
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Value */
      value: number;
      /** Description */
      description: string;
    };
    /**
     * PaymentType
     * @description An enumeration.
     * @enum {string}
     */
    PaymentType: "invoice" | "manual";
    /** PollLogsRequestRequest */
    PollLogsRequestRequest: {
      /** Run Name */
      run_name: string;
      /**
       * Job Submission Id
       * Format: uuid4
       */
      job_submission_id: string;
      /**
       * Start Time
       * Format: date-time
       */
      start_time?: string;
      /**
       * End Time
       * Format: date-time
       */
      end_time?: string;
      /**
       * Descending
       * @default false
       */
      descending?: boolean;
      /**
       * Limit
       * @default 100
       */
      limit?: number;
      /**
       * Diagnose
       * @default false
       */
      diagnose?: boolean;
    };
    /** PoolInstanceOffersRequest */
    PoolInstanceOffersRequest: {
      /** Pool Name */
      pool_name: string;
      /** Instances */
      instances: components["schemas"]["InstanceOfferWithAvailabilityRequest"][];
    };
    /** PoolInstancesRequest */
    PoolInstancesRequest: {
      /** Name */
      name: string;
      /** Instances */
      instances: components["schemas"]["InstanceRequest"][];
    };
    /** PoolRequest */
    PoolRequest: {
      /** Name */
      name: string;
      /** Default */
      default: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /** Total Instances */
      total_instances: number;
      /** Available Instances */
      available_instances: number;
    };
    /** PortMappingRequest */
    PortMappingRequest: {
      /** Local Port */
      local_port?: number;
      /** Container Port */
      container_port: number;
    };
    /** PortalSessionInfo */
    PortalSessionInfo: {
      /** Url */
      url: string;
    };
    /** ProfileRequest */
    ProfileRequest: {
      /** @description The backends to consider for provisioning (e.g., `[aws, gcp]`) */
      backends?: components["schemas"]["BackendType"][];
      /**
       * Regions
       * @description The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)
       */
      regions?: string[];
      /**
       * Instance Types
       * @description The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)
       */
      instance_types?: string[];
      /** @description The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto` */
      spot_policy?: components["schemas"]["SpotPolicy"];
      /**
       * Retry
       * @description The policy for resubmitting the run. Defaults to `false`
       */
      retry?: components["schemas"]["ProfileRetryRequest"] | boolean;
      /**
       * Retry Policy
       * @description The policy for resubmitting the run. Deprecated in favor of `retry`
       */
      retry_policy?: components["schemas"]["ProfileRetryPolicyRequest"];
      /**
       * Max Duration
       * @description The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`
       */
      max_duration?: "off" | string | number;
      /**
       * Max Price
       * @description The maximum instance price per hour, in dollars
       */
      max_price?: number;
      /**
       * Pool Name
       * @description The name of the pool. If not set, dstack will use the default name
       */
      pool_name?: string;
      /**
       * Instance Name
       * @description The name of the instance
       */
      instance_name?: string;
      /** @description The policy for using instances from the pool. Defaults to `reuse-or-create` */
      creation_policy?: components["schemas"]["CreationPolicy"];
      /** @description The policy for instance termination. Defaults to `destroy-after-idle` */
      termination_policy?: components["schemas"]["TerminationPolicy"];
      /**
       * Termination Idle Time
       * @description Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`
       */
      termination_idle_time?: number | string;
      /**
       * Name
       * @description The name of the profile that can be passed as `--profile` to `dstack run`
       */
      name: string;
      /**
       * Default
       * @description If set to true, `dstack run` will use this profile by default.
       * @default false
       */
      default?: boolean;
    };
    /** ProfileRetryPolicyRequest */
    ProfileRetryPolicyRequest: {
      /**
       * Retry
       * @description Whether to retry the run on failure or not
       * @default false
       */
      retry?: boolean;
      /**
       * Duration
       * @description The maximum period of retrying the run, e.g., `4h` or `1d`
       */
      duration?: number | string;
    };
    /** ProfileRetryRequest */
    ProfileRetryRequest: {
      /** @description The list of events that should be handled with retry. Supported events are `no-capacity`, `interruption`, and `error` */
      on_events: components["schemas"]["RetryEvent"][];
      /**
       * Duration
       * @description The maximum period of retrying the run, e.g., `4h` or `1d`
       */
      duration?: number | string;
    };
    /** ProjectRequest */
    ProjectRequest: {
      /**
       * Project Id
       * Format: uuid4
       */
      project_id: string;
      /** Project Name */
      project_name: string;
      owner: components["schemas"]["UserRequest"];
      /** Backends */
      backends: components["schemas"]["BackendInfoRequest"][];
      /** Members */
      members: components["schemas"]["MemberRequest"][];
    };
    /**
     * ProjectRole
     * @description An enumeration.
     * @enum {string}
     */
    ProjectRole: "admin" | "user";
    /**
     * PythonVersion
     * @description An enumeration.
     * @enum {string}
     */
    PythonVersion: "3.8" | "3.9" | "3.10" | "3.11" | "3.12";
    /** Range[Memory] */
    Range_Memory_: {
      /** Min */
      min?: number;
      /** Max */
      max?: number;
    };
    /** Range[int] */
    Range_int_: {
      /** Min */
      min?: number;
      /** Max */
      max?: number;
    };
    /** RefreshTokenRequestRequest */
    RefreshTokenRequestRequest: {
      /** Username */
      username: string;
    };
    /**
     * RegistryAuthRequest
     * @description Credentials for pulling a private Docker image.
     *
     * Attributes:
     *     username (str): The username
     *     password (str): The password or access token
     */
    RegistryAuthRequest: {
      /**
       * Username
       * @description The username
       */
      username: string;
      /**
       * Password
       * @description The password or access token
       */
      password: string;
    };
    /** RemoteRepoCredsDtoRequest */
    RemoteRepoCredsDtoRequest: {
      protocol: components["schemas"]["RepoProtocol"];
      /** Clone Url */
      clone_url?: string;
      /** Private Key */
      private_key?: string;
      /** Oauth Token */
      oauth_token?: string;
    };
    /** RemoteRepoCredsRequest */
    RemoteRepoCredsRequest: {
      protocol: components["schemas"]["RepoProtocol"];
      /** Clone Url */
      clone_url: string;
      /** Private Key */
      private_key?: string;
      /** Oauth Token */
      oauth_token?: string;
    };
    /** RemoteRepoInfoRequest */
    RemoteRepoInfoRequest: {
      /**
       * Repo Type
       * @default remote
       * @enum {string}
       */
      repo_type?: "remote";
      /** Repo Name */
      repo_name: string;
      /**
       * Repo Host Name
       * @default
       */
      repo_host_name?: string;
      /** Repo Port */
      repo_port?: number;
      /**
       * Repo User Name
       * @default
       */
      repo_user_name?: string;
    };
    /** RemoteRunRepoDataRequest */
    RemoteRunRepoDataRequest: {
      /**
       * Repo Type
       * @default remote
       * @enum {string}
       */
      repo_type?: "remote";
      /** Repo Name */
      repo_name: string;
      /**
       * Repo Host Name
       * @default
       */
      repo_host_name?: string;
      /** Repo Port */
      repo_port?: number;
      /**
       * Repo User Name
       * @default
       */
      repo_user_name?: string;
      /** Repo Branch */
      repo_branch?: string;
      /** Repo Hash */
      repo_hash?: string;
      /** Repo Diff */
      repo_diff?: string;
      /** Repo Config Name */
      repo_config_name?: string;
      /** Repo Config Email */
      repo_config_email?: string;
    };
    /** RemoveInstanceRequestRequest */
    RemoveInstanceRequestRequest: {
      /** Pool Name */
      pool_name: string;
      /** Instance Name */
      instance_name: string;
      /**
       * Force
       * @default false
       */
      force?: boolean;
    };
    /** RepoHeadRequest */
    RepoHeadRequest: {
      /** Repo Id */
      repo_id: string;
      /** Repo Info */
      repo_info: components["schemas"]["RemoteRepoInfoRequest"] | components["schemas"]["LocalRepoInfoRequest"] | components["schemas"]["VirtualRepoInfoRequest"];
    };
    /** RepoHeadWithCredsRequest */
    RepoHeadWithCredsRequest: {
      /** Repo Id */
      repo_id: string;
      /** Repo Info */
      repo_info: components["schemas"]["RemoteRepoInfoRequest"] | components["schemas"]["LocalRepoInfoRequest"] | components["schemas"]["VirtualRepoInfoRequest"];
      repo_creds?: components["schemas"]["RemoteRepoCredsRequest"];
    };
    /**
     * RepoProtocol
     * @description An enumeration.
     * @enum {string}
     */
    RepoProtocol: "ssh" | "https";
    /** RequirementsRequest */
    RequirementsRequest: {
      resources: components["schemas"]["ResourcesSpecRequest"];
      /** Max Price */
      max_price?: number;
      /** Spot */
      spot?: boolean;
    };
    /** ResourcesRequest */
    ResourcesRequest: {
      /** Cpus */
      cpus: number;
      /** Memory Mib */
      memory_mib: number;
      /** Gpus */
      gpus: components["schemas"]["GpuRequest"][];
      /** Spot */
      spot: boolean;
      /**
       * Disk
       * @default {
       *   "size_mib": 102400
       * }
       */
      disk?: components["schemas"]["DiskRequest"];
      /**
       * Description
       * @default
       */
      description?: string;
    };
    /** ResourcesSpecSchemaRequest */
    ResourcesSpecRequest: {
      /**
       * Cpu
       * @description The number of CPU cores
       * @default {
       *   "min": 2
       * }
       */
      cpu?: definitions["ResourcesSpecRequest"]["definitions"]["Range_Union_int__str__"] | number | string;
      /**
       * Memory
       * @description The RAM size (e.g., `8GB`)
       * @default {
       *   "min": 8
       * }
       */
      memory?: definitions["ResourcesSpecRequest"]["definitions"]["Range_Union_Memory__float__int__str__"] | number | string;
      /**
       * Shm Size
       * @description The size of shared memory (e.g., `8GB`). If you are using parallel communicating processes (e.g., dataloaders in PyTorch), you may need to configure this
       */
      shm_size?: number | string;
      /**
       * Gpu
       * @description The GPU requirements. Can be set to a number, a string (e.g. `A100`, `80GB:2`, etc.), or an object
       */
      gpu?: definitions["ResourcesSpecRequest"]["definitions"]["GPUSpecRequest"] | definitions["ResourcesSpecRequest"]["definitions"]["GPUSpecSchemaRequest"] | number | string;
      /**
       * Disk
       * @description The disk resources
       * @default {
       *   "size": {
       *     "min": 100
       *   }
       * }
       */
      disk?: definitions["ResourcesSpecRequest"]["definitions"]["DiskSpecRequest"] | definitions["ResourcesSpecRequest"]["definitions"]["DiskSpecSchemaRequest"] | number | string;
    };
    /**
     * RetryEvent
     * @description An enumeration.
     * @enum {string}
     */
    RetryEvent: "no-capacity" | "interruption" | "error";
    /** RetryRequest */
    RetryRequest: {
      on_events: components["schemas"]["RetryEvent"][];
      /** Duration */
      duration: number;
    };
    /** RunPlanRequest */
    RunPlanRequest: {
      /** Project Name */
      project_name: string;
      /** User */
      user: string;
      run_spec: components["schemas"]["RunSpecRequest"];
      /** Job Plans */
      job_plans: components["schemas"]["JobPlanRequest"][];
    };
    /** RunRequest */
    RunRequest: {
      /**
       * Id
       * Format: uuid4
       */
      id: string;
      /** Project Name */
      project_name: string;
      /** User */
      user: string;
      /**
       * Submitted At
       * Format: date-time
       */
      submitted_at: string;
      /**
       * Last Processed At
       * Format: date-time
       */
      last_processed_at: string;
      status: components["schemas"]["RunStatus"];
      termination_reason?: components["schemas"]["RunTerminationReason"];
      run_spec: components["schemas"]["RunSpecRequest"];
      /** Jobs */
      jobs: components["schemas"]["JobRequest"][];
      latest_job_submission?: components["schemas"]["JobSubmissionRequest"];
      /**
       * Cost
       * @default 0
       */
      cost?: number;
      service?: components["schemas"]["ServiceSpecRequest"];
    };
    /** RunSpecRequest */
    RunSpecRequest: {
      /** Run Name */
      run_name?: string;
      /** Repo Id */
      repo_id: string;
      /** Repo Data */
      repo_data: components["schemas"]["RemoteRunRepoDataRequest"] | components["schemas"]["LocalRunRepoDataRequest"] | components["schemas"]["VirtualRunRepoDataRequest"];
      /** Repo Code Hash */
      repo_code_hash?: string;
      /** Working Dir */
      working_dir: string;
      /** Configuration Path */
      configuration_path: string;
      /** Configuration */
      configuration: components["schemas"]["DevEnvironmentConfigurationRequest"] | components["schemas"]["TaskConfigurationRequest"] | components["schemas"]["ServiceConfigurationRequest"];
      profile: components["schemas"]["ProfileRequest"];
      /** Ssh Key Pub */
      ssh_key_pub: string;
    };
    /**
     * RunStatus
     * @description An enumeration.
     * @enum {string}
     */
    RunStatus: "pending" | "submitted" | "provisioning" | "running" | "terminating" | "terminated" | "failed" | "done";
    /**
     * RunTerminationReason
     * @description An enumeration.
     * @enum {string}
     */
    RunTerminationReason: "all_jobs_done" | "job_failed" | "retry_limit_exceeded" | "stopped_by_user" | "aborted_by_user" | "server_error";
    /** RunpodAPIKeyCredsRequest */
    RunpodAPIKeyCredsRequest: {
      /**
       * Type
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /** Api Key */
      api_key: string;
    };
    /** RunpodConfigInfoRequest */
    RunpodConfigInfoRequest: {
      /**
       * Type
       * @default runpod
       * @enum {string}
       */
      type?: "runpod";
      /** Regions */
      regions?: string[];
    };
    /** RunpodConfigInfoWithCredsPartialRequest */
    RunpodConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default runpod
       * @enum {string}
       */
      type?: "runpod";
      creds?: components["schemas"]["RunpodAPIKeyCredsRequest"];
      /** Regions */
      regions?: string[];
    };
    /** RunpodConfigInfoWithCredsRequest */
    RunpodConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default runpod
       * @enum {string}
       */
      type?: "runpod";
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["RunpodAPIKeyCredsRequest"];
    };
    /** RunpodConfigValuesRequest */
    RunpodConfigValuesRequest: {
      /**
       * Type
       * @default runpod
       * @enum {string}
       */
      type?: "runpod";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** SSHConnectionParamsRequest */
    SSHConnectionParamsRequest: {
      /** Hostname */
      hostname: string;
      /** Username */
      username: string;
      /** Port */
      port: number;
    };
    /** SSHHostParamsRequest */
    SSHHostParamsRequest: {
      /**
       * Hostname
       * @description The IP address or domain to connect to
       */
      hostname: string;
      /**
       * Port
       * @description The SSH port to connect to for this host
       */
      port?: number;
      /**
       * User
       * @description The user to log in with for this host
       */
      user?: string;
      /**
       * Identity File
       * @description The private key to use for this host
       */
      identity_file?: string;
      ssh_key?: components["schemas"]["SSHKeyRequest"];
    };
    /** SSHKeyRequest */
    SSHKeyRequest: {
      /** Public */
      public: string;
      /** Private */
      private?: string;
    };
    /** SSHParamsRequest */
    SSHParamsRequest: {
      /**
       * User
       * @description The user to log in with on all hosts
       */
      user?: string;
      /**
       * Port
       * @description The SSH port to connect to
       */
      port?: number;
      /**
       * Identity File
       * @description The private key to use for all hosts
       */
      identity_file?: string;
      ssh_key?: components["schemas"]["SSHKeyRequest"];
      /**
       * Hosts
       * @description The per host connection parameters: a hostname or an object that overrides default ssh parameters
       */
      hosts: (components["schemas"]["SSHHostParamsRequest"] | string)[];
      /**
       * Network
       * @description The network address for cluster setup in the format `<ip>/<netmask>`
       */
      network?: string;
    };
    /** SaveRepoCredsRequestRequest */
    SaveRepoCredsRequestRequest: {
      /** Repo Id */
      repo_id: string;
      /** Repo Info */
      repo_info: components["schemas"]["RemoteRepoInfoRequest"] | components["schemas"]["LocalRepoInfoRequest"] | components["schemas"]["VirtualRepoInfoRequest"];
      repo_creds?: components["schemas"]["RemoteRepoCredsDtoRequest"];
    };
    /** ScalingSpecRequest */
    ScalingSpecRequest: {
      /**
       * Metric
       * @description The target metric to track. Currently, the only supported value is `rps` (meaning requests per second)
       * @enum {string}
       */
      metric: "rps";
      /**
       * Target
       * @description The target value of the metric. The number of replicas is calculated based on this number and automatically adjusts (scales up or down) as this metric changes
       */
      target: number;
      /**
       * Scale Up Delay
       * @description The delay in seconds before scaling up
       * @default 300
       */
      scale_up_delay?: number;
      /**
       * Scale Down Delay
       * @description The delay in seconds before scaling down
       * @default 600
       */
      scale_down_delay?: number;
    };
    /** SecretRequest */
    SecretRequest: {
      /** Name */
      name: string;
      /** Value */
      value: string;
    };
    /** ServiceConfigurationRequest */
    ServiceConfigurationRequest: {
      /**
       * Port
       * @description The port, that application listens on or the mapping
       */
      port: number | string | components["schemas"]["PortMappingRequest"];
      /**
       * Model
       * @description Mapping of the model for the OpenAI-compatible endpoint
       */
      model?: components["schemas"]["TGIChatModelRequest"] | components["schemas"]["OpenAIChatModelRequest"];
      /**
       * Https
       * @description Enable HTTPS
       * @default true
       */
      https?: boolean;
      /**
       * Auth
       * @description Enable the authorization
       * @default true
       */
      auth?: boolean;
      /**
       * Replicas
       * @description The number of replicas. Can be a number (e.g. `2`) or a range (`0..4` or `1..8`). If it's a range, the `scaling` property is required
       * @default {
       *   "min": 1,
       *   "max": 1
       * }
       */
      replicas?: number | string | components["schemas"]["Range_int_"];
      /**
       * Scaling
       * @description The auto-scaling rules. Required if `replicas` is set to a range
       */
      scaling?: components["schemas"]["ScalingSpecRequest"];
      /**
       * Type
       * @default service
       * @enum {string}
       */
      type?: "service";
      /**
       * Name
       * @description The run name
       */
      name?: string;
      /**
       * Image
       * @description The name of the Docker image to run
       */
      image?: string;
      /**
       * Entrypoint
       * @description The Docker entrypoint
       */
      entrypoint?: string;
      /**
       * Working Dir
       * @description The path to the working directory inside the container. It's specified relative to the repository directory (`/workflow`) and should be inside it. Defaults to `"."`
       */
      working_dir?: string;
      /**
       * Home Dir
       * @description The absolute path to the home directory inside the container. Defaults to `/root`
       * @default /root
       */
      home_dir?: string;
      /**
       * Registry Auth
       * @description Credentials for pulling a private Docker image
       */
      registry_auth?: components["schemas"]["RegistryAuthRequest"];
      /** @description The major version of Python. Mutually exclusive with `image` */
      python?: components["schemas"]["PythonVersion"];
      /**
       * Env
       * @description The mapping or the list of environment variables
       * @default {}
       */
      env?: string[] | ({
        [key: string]: string | components["schemas"]["EnvSentinelRequest"];
      });
      /**
       * Setup
       * @description The bash commands to run on the boot
       * @default []
       */
      setup?: string[];
      /**
       * Resources
       * @description The resources requirements to run the configuration
       * @default {
       *   "cpu": {
       *     "min": 2
       *   },
       *   "memory": {
       *     "min": 8
       *   },
       *   "disk": {
       *     "size": {
       *       "min": 100
       *     }
       *   }
       * }
       */
      resources?: components["schemas"]["ResourcesSpecRequest"];
      /**
       * Volumes
       * @description The volumes mount points
       * @default []
       */
      volumes?: components["schemas"]["VolumeMountPointRequest"][];
      /**
       * Commands
       * @description The bash commands to run
       * @default []
       */
      commands?: string[];
      /** @description The backends to consider for provisioning (e.g., `[aws, gcp]`) */
      backends?: components["schemas"]["BackendType"][];
      /**
       * Regions
       * @description The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)
       */
      regions?: string[];
      /**
       * Instance Types
       * @description The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)
       */
      instance_types?: string[];
      /** @description The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto` */
      spot_policy?: components["schemas"]["SpotPolicy"];
      /**
       * Retry
       * @description The policy for resubmitting the run. Defaults to `false`
       */
      retry?: components["schemas"]["ProfileRetryRequest"] | boolean;
      /**
       * Retry Policy
       * @description The policy for resubmitting the run. Deprecated in favor of `retry`
       */
      retry_policy?: components["schemas"]["ProfileRetryPolicyRequest"];
      /**
       * Max Duration
       * @description The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`
       */
      max_duration?: "off" | string | number;
      /**
       * Max Price
       * @description The maximum instance price per hour, in dollars
       */
      max_price?: number;
      /**
       * Pool Name
       * @description The name of the pool. If not set, dstack will use the default name
       */
      pool_name?: string;
      /**
       * Instance Name
       * @description The name of the instance
       */
      instance_name?: string;
      /** @description The policy for using instances from the pool. Defaults to `reuse-or-create` */
      creation_policy?: components["schemas"]["CreationPolicy"];
      /** @description The policy for instance termination. Defaults to `destroy-after-idle` */
      termination_policy?: components["schemas"]["TerminationPolicy"];
      /**
       * Termination Idle Time
       * @description Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`
       */
      termination_idle_time?: number | string;
    };
    /** ServiceModelSpecRequest */
    ServiceModelSpecRequest: {
      /** Name */
      name: string;
      /** Base Url */
      base_url: string;
      /** Type */
      type: string;
    };
    /** ServiceSpecRequest */
    ServiceSpecRequest: {
      /** Url */
      url: string;
      model?: components["schemas"]["ServiceModelSpecRequest"];
      /**
       * Options
       * @default {}
       */
      options?: Record<string, never>;
    };
    /** SetDefaultGatewayRequestRequest */
    SetDefaultGatewayRequestRequest: {
      /** Name */
      name: string;
    };
    /** SetDefaultPoolRequestRequest */
    SetDefaultPoolRequestRequest: {
      /** Pool Name */
      pool_name: string;
    };
    /** SetProjectMembersRequestRequest */
    SetProjectMembersRequestRequest: {
      /** Members */
      members: components["schemas"]["MemberSettingRequest"][];
    };
    /** SetWildcardDomainRequestRequest */
    SetWildcardDomainRequestRequest: {
      /** Name */
      name: string;
      /** Wildcard Domain */
      wildcard_domain: string;
    };
    /** ShowPoolRequestRequest */
    ShowPoolRequestRequest: {
      /** Name */
      name?: string;
    };
    /**
     * SpotPolicy
     * @description An enumeration.
     * @enum {string}
     */
    SpotPolicy: "spot" | "on-demand" | "auto";
    /** StopRunsRequestRequest */
    StopRunsRequestRequest: {
      /** Runs Names */
      runs_names: string[];
      /** Abort */
      abort: boolean;
    };
    /** SubmitRunRequestRequest */
    SubmitRunRequestRequest: {
      run_spec: components["schemas"]["RunSpecRequest"];
    };
    /**
     * TGIChatModelRequest
     * @description Mapping of the model for the OpenAI-compatible endpoint.
     *
     * Attributes:
     *     type (str): The type of the model, e.g. "chat"
     *     name (str): The name of the model. This name will be used both to load model configuration from the HuggingFace Hub and in the OpenAI-compatible endpoint.
     *     format (str): The format of the model, e.g. "tgi" if the model is served with HuggingFace's Text Generation Inference.
     *     chat_template (Optional[str]): The custom prompt template for the model. If not specified, the default prompt template the HuggingFace Hub configuration will be used.
     *     eos_token (Optional[str]): The custom end of sentence token. If not specified, the default custom end of sentence token from the HuggingFace Hub configuration will be used.
     */
    TGIChatModelRequest: {
      /**
       * Type
       * @description The type of the model
       * @enum {string}
       */
      type: "chat";
      /**
       * Name
       * @description The name of the model
       */
      name: string;
      /**
       * Format
       * @enum {string}
       */
      format: "tgi";
      /** Chat Template */
      chat_template?: string;
      /** Eos Token */
      eos_token?: string;
    };
    /** TaskConfigurationRequest */
    TaskConfigurationRequest: {
      /**
       * Nodes
       * @description Number of nodes
       * @default 1
       */
      nodes?: number;
      /**
       * Type
       * @default task
       * @enum {string}
       */
      type?: "task";
      /**
       * Name
       * @description The run name
       */
      name?: string;
      /**
       * Image
       * @description The name of the Docker image to run
       */
      image?: string;
      /**
       * Entrypoint
       * @description The Docker entrypoint
       */
      entrypoint?: string;
      /**
       * Working Dir
       * @description The path to the working directory inside the container. It's specified relative to the repository directory (`/workflow`) and should be inside it. Defaults to `"."`
       */
      working_dir?: string;
      /**
       * Home Dir
       * @description The absolute path to the home directory inside the container. Defaults to `/root`
       * @default /root
       */
      home_dir?: string;
      /**
       * Registry Auth
       * @description Credentials for pulling a private Docker image
       */
      registry_auth?: components["schemas"]["RegistryAuthRequest"];
      /** @description The major version of Python. Mutually exclusive with `image` */
      python?: components["schemas"]["PythonVersion"];
      /**
       * Env
       * @description The mapping or the list of environment variables
       * @default {}
       */
      env?: string[] | ({
        [key: string]: string | components["schemas"]["EnvSentinelRequest"];
      });
      /**
       * Setup
       * @description The bash commands to run on the boot
       * @default []
       */
      setup?: string[];
      /**
       * Resources
       * @description The resources requirements to run the configuration
       * @default {
       *   "cpu": {
       *     "min": 2
       *   },
       *   "memory": {
       *     "min": 8
       *   },
       *   "disk": {
       *     "size": {
       *       "min": 100
       *     }
       *   }
       * }
       */
      resources?: components["schemas"]["ResourcesSpecRequest"];
      /**
       * Volumes
       * @description The volumes mount points
       * @default []
       */
      volumes?: components["schemas"]["VolumeMountPointRequest"][];
      /**
       * Ports
       * @description Port numbers/mapping to expose
       * @default []
       */
      ports?: (number | string | components["schemas"]["PortMappingRequest"])[];
      /**
       * Commands
       * @description The bash commands to run
       * @default []
       */
      commands?: string[];
      /** @description The backends to consider for provisioning (e.g., `[aws, gcp]`) */
      backends?: components["schemas"]["BackendType"][];
      /**
       * Regions
       * @description The regions to consider for provisioning (e.g., `[eu-west-1, us-west4, westeurope]`)
       */
      regions?: string[];
      /**
       * Instance Types
       * @description The cloud-specific instance types to consider for provisioning (e.g., `[p3.8xlarge, n1-standard-4]`)
       */
      instance_types?: string[];
      /** @description The policy for provisioning spot or on-demand instances: `spot`, `on-demand`, or `auto` */
      spot_policy?: components["schemas"]["SpotPolicy"];
      /**
       * Retry
       * @description The policy for resubmitting the run. Defaults to `false`
       */
      retry?: components["schemas"]["ProfileRetryRequest"] | boolean;
      /**
       * Retry Policy
       * @description The policy for resubmitting the run. Deprecated in favor of `retry`
       */
      retry_policy?: components["schemas"]["ProfileRetryPolicyRequest"];
      /**
       * Max Duration
       * @description The maximum duration of a run (e.g., `2h`, `1d`, etc). After it elapses, the run is forced to stop. Defaults to `off`
       */
      max_duration?: "off" | string | number;
      /**
       * Max Price
       * @description The maximum instance price per hour, in dollars
       */
      max_price?: number;
      /**
       * Pool Name
       * @description The name of the pool. If not set, dstack will use the default name
       */
      pool_name?: string;
      /**
       * Instance Name
       * @description The name of the instance
       */
      instance_name?: string;
      /** @description The policy for using instances from the pool. Defaults to `reuse-or-create` */
      creation_policy?: components["schemas"]["CreationPolicy"];
      /** @description The policy for instance termination. Defaults to `destroy-after-idle` */
      termination_policy?: components["schemas"]["TerminationPolicy"];
      /**
       * Termination Idle Time
       * @description Time to wait before destroying the idle instance. Defaults to `5m` for `dstack run` and to `3d` for `dstack pool add`
       */
      termination_idle_time?: number | string;
    };
    /** TensorDockAPIKeyCredsRequest */
    TensorDockAPIKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /**
       * Api Key
       * @description The API key
       */
      api_key: string;
      /**
       * Api Token
       * @description The API token
       */
      api_token: string;
    };
    /** TensorDockConfigInfoRequest */
    TensorDockConfigInfoRequest: {
      /**
       * Type
       * @default tensordock
       * @enum {string}
       */
      type?: "tensordock";
      /** Regions */
      regions?: string[];
    };
    /** TensorDockConfigInfoWithCredsPartialRequest */
    TensorDockConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default tensordock
       * @enum {string}
       */
      type?: "tensordock";
      creds?: components["schemas"]["TensorDockAPIKeyCredsRequest"];
      /** Regions */
      regions?: string[];
    };
    /** TensorDockConfigInfoWithCredsRequest */
    TensorDockConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default tensordock
       * @enum {string}
       */
      type?: "tensordock";
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["TensorDockAPIKeyCredsRequest"];
    };
    /** TensorDockConfigValuesRequest */
    TensorDockConfigValuesRequest: {
      /**
       * Type
       * @default tensordock
       * @enum {string}
       */
      type?: "tensordock";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /**
     * TerminationPolicy
     * @description An enumeration.
     * @enum {string}
     */
    TerminationPolicy: "dont-destroy" | "destroy-after-idle";
    /** UpdateBackendYAMLRequestRequest */
    UpdateBackendYAMLRequestRequest: {
      /** Config Yaml */
      config_yaml: string;
    };
    /** UserBillingInfo */
    UserBillingInfo: {
      /** Balance */
      balance: number;
      /** Billing History */
      billing_history: components["schemas"]["Payment"][];
      /** Is Payment Method Attached */
      is_payment_method_attached: boolean;
      /** Default Payment Amount */
      default_payment_amount: number;
    };
    /** UserRequest */
    UserRequest: {
      /**
       * Id
       * Format: uuid4
       */
      id: string;
      /** Username */
      username: string;
      global_role: components["schemas"]["GlobalRole"];
      /** Email */
      email?: string;
    };
    /** UserTokenCredsRequest */
    UserTokenCredsRequest: {
      /** Token */
      token: string;
    };
    /** UserWithCredsRequest */
    UserWithCredsRequest: {
      /**
       * Id
       * Format: uuid4
       */
      id: string;
      /** Username */
      username: string;
      global_role: components["schemas"]["GlobalRole"];
      /** Email */
      email?: string;
      creds: components["schemas"]["UserTokenCredsRequest"];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
    /** VastAIAPIKeyCredsRequest */
    VastAIAPIKeyCredsRequest: {
      /**
       * Type
       * @description The type of credentials
       * @default api_key
       * @enum {string}
       */
      type?: "api_key";
      /**
       * Api Key
       * @description The API key
       */
      api_key: string;
    };
    /** VastAIConfigInfoRequest */
    VastAIConfigInfoRequest: {
      /**
       * Type
       * @default vastai
       * @enum {string}
       */
      type?: "vastai";
      /** Regions */
      regions?: string[];
    };
    /** VastAIConfigInfoWithCredsPartialRequest */
    VastAIConfigInfoWithCredsPartialRequest: {
      /**
       * Type
       * @default vastai
       * @enum {string}
       */
      type?: "vastai";
      creds?: components["schemas"]["VastAIAPIKeyCredsRequest"];
      /** Regions */
      regions?: string[];
    };
    /** VastAIConfigInfoWithCredsRequest */
    VastAIConfigInfoWithCredsRequest: {
      /**
       * Type
       * @default vastai
       * @enum {string}
       */
      type?: "vastai";
      /** Regions */
      regions?: string[];
      creds: components["schemas"]["VastAIAPIKeyCredsRequest"];
    };
    /** VastAIConfigValuesRequest */
    VastAIConfigValuesRequest: {
      /**
       * Type
       * @default vastai
       * @enum {string}
       */
      type?: "vastai";
      regions?: components["schemas"]["ConfigMultiElementRequest"];
    };
    /** VirtualRepoInfoRequest */
    VirtualRepoInfoRequest: {
      /**
       * Repo Type
       * @default virtual
       * @enum {string}
       */
      repo_type?: "virtual";
    };
    /** VirtualRunRepoDataRequest */
    VirtualRunRepoDataRequest: {
      /**
       * Repo Type
       * @default virtual
       * @enum {string}
       */
      repo_type?: "virtual";
    };
    /** VolumeAttachmentDataRequest */
    VolumeAttachmentDataRequest: {
      /** Device Name */
      device_name?: string;
    };
    /** VolumeConfigurationRequest */
    VolumeConfigurationRequest: {
      /**
       * Type
       * @default volume
       * @enum {string}
       */
      type?: "volume";
      /**
       * Name
       * @description The volume name
       */
      name?: string;
      /** @description The volume backend */
      backend: components["schemas"]["BackendType"];
      /**
       * Region
       * @description The volume region
       */
      region: string;
      /**
       * Size
       * @description The volume size. Must be specified when creating new volumes
       */
      size?: number;
      /**
       * Volume Id
       * @description The volume ID. Must be specified when registering external volumes
       */
      volume_id?: string;
    };
    /** VolumeMountPointRequest */
    VolumeMountPointRequest: {
      /**
       * Name
       * @description The name of the volume to mount
       */
      name: string;
      /**
       * Path
       * @description The container path to mount the volume at
       */
      path: string;
    };
    /** VolumeProvisioningDataRequest */
    VolumeProvisioningDataRequest: {
      backend?: components["schemas"]["BackendType"];
      /** Volume Id */
      volume_id: string;
      /** Size Gb */
      size_gb: number;
      /** Availability Zone */
      availability_zone?: string;
      /** Price */
      price?: number;
      /**
       * Attachable
       * @default true
       */
      attachable?: boolean;
      /**
       * Detachable
       * @default true
       */
      detachable?: boolean;
      /** Backend Data */
      backend_data?: string;
    };
    /** VolumeRequest */
    VolumeRequest: {
      /** Name */
      name: string;
      /** Project Name */
      project_name: string;
      configuration: components["schemas"]["VolumeConfigurationRequest"];
      /** External */
      external: boolean;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      status: components["schemas"]["VolumeStatus"];
      /** Status Message */
      status_message?: string;
      /** Volume Id */
      volume_id?: string;
      provisioning_data?: components["schemas"]["VolumeProvisioningDataRequest"];
      attachment_data?: components["schemas"]["VolumeAttachmentDataRequest"];
      /**
       * Volume Model Id
       * Format: uuid
       */
      volume_model_id: string;
    };
    /**
     * VolumeStatus
     * @description An enumeration.
     * @enum {string}
     */
    VolumeStatus: "submitted" | "provisioning" | "active" | "failed";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** Index */
  index__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** Github Authorize */
  github_authorize_api_auth_github_authorize_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorizeResponse"];
        };
      };
    };
  };
  /** Github Callback */
  github_callback_api_auth_github_callback_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CallbackRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithCredsRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List User Manual Payments */
  list_user_manual_payments_api_user__username__payments_list_post: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Payment"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add User Manual Payment */
  add_user_manual_payment_api_user__username__payments_add_post: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddUserManualPaymentRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["Payment"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Backend */
  create_backend_api_project__project_name__backends_create_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AWSConfigInfoWithCredsRequest"] | components["schemas"]["AzureConfigInfoWithCredsRequest"] | components["schemas"]["CudoConfigInfoWithCredsRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsRequest"] | components["schemas"]["GCPConfigInfoWithCredsRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsRequest"] | components["schemas"]["LambdaConfigInfoWithCredsRequest"] | components["schemas"]["NebiusConfigInfoWithCredsRequest"] | components["schemas"]["OCIConfigInfoWithCredsRequest"] | components["schemas"]["RunpodConfigInfoWithCredsRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsRequest"] | components["schemas"]["VastAIConfigInfoWithCredsRequest"] | components["schemas"]["DstackConfigInfoRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AWSConfigInfoWithCredsRequest"] | components["schemas"]["AzureConfigInfoWithCredsRequest"] | components["schemas"]["CudoConfigInfoWithCredsRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsRequest"] | components["schemas"]["GCPConfigInfoWithCredsRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsRequest"] | components["schemas"]["LambdaConfigInfoWithCredsRequest"] | components["schemas"]["NebiusConfigInfoWithCredsRequest"] | components["schemas"]["OCIConfigInfoWithCredsRequest"] | components["schemas"]["RunpodConfigInfoWithCredsRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsRequest"] | components["schemas"]["VastAIConfigInfoWithCredsRequest"] | components["schemas"]["DstackConfigInfoRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Backend */
  update_backend_api_project__project_name__backends_update_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AWSConfigInfoWithCredsRequest"] | components["schemas"]["AzureConfigInfoWithCredsRequest"] | components["schemas"]["CudoConfigInfoWithCredsRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsRequest"] | components["schemas"]["GCPConfigInfoWithCredsRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsRequest"] | components["schemas"]["LambdaConfigInfoWithCredsRequest"] | components["schemas"]["NebiusConfigInfoWithCredsRequest"] | components["schemas"]["OCIConfigInfoWithCredsRequest"] | components["schemas"]["RunpodConfigInfoWithCredsRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsRequest"] | components["schemas"]["VastAIConfigInfoWithCredsRequest"] | components["schemas"]["DstackConfigInfoRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AWSConfigInfoWithCredsRequest"] | components["schemas"]["AzureConfigInfoWithCredsRequest"] | components["schemas"]["CudoConfigInfoWithCredsRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsRequest"] | components["schemas"]["GCPConfigInfoWithCredsRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsRequest"] | components["schemas"]["LambdaConfigInfoWithCredsRequest"] | components["schemas"]["NebiusConfigInfoWithCredsRequest"] | components["schemas"]["OCIConfigInfoWithCredsRequest"] | components["schemas"]["RunpodConfigInfoWithCredsRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsRequest"] | components["schemas"]["VastAIConfigInfoWithCredsRequest"] | components["schemas"]["DstackConfigInfoRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Backends */
  delete_backends_api_project__project_name__backends_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteBackendsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Backend Yaml */
  create_backend_yaml_api_project__project_name__backends_create_yaml_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateBackendYAMLRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update Backend Yaml */
  update_backend_yaml_api_project__project_name__backends_update_yaml_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateBackendYAMLRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Backend Yaml */
  get_backend_yaml_api_project__project_name__backends__backend_name__get_yaml_post: {
    parameters: {
      path: {
        backend_name: components["schemas"]["BackendType"];
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BackendInfoYAMLRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Backend Quotas */
  list_backend_quotas_api_project__project_name__backend__backend_name__quotas_list_post: {
    parameters: {
      path: {
        backend_name: components["schemas"]["BackendType"];
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BackendQuotaRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Backend Quotas */
  set_backend_quotas_api_project__project_name__backend__backend_name__quotas_set_post: {
    parameters: {
      path: {
        backend_name: components["schemas"]["BackendType"];
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["BackendQuotaRequest"][];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BackendQuotaRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Billing Info */
  billing_info_api_billing_info_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBillingInfo"];
        };
      };
    };
  };
  /** Stripe Webhook */
  stripe_webhook_api_billing_stripe_webhook_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  /** User Billing Info */
  user_billing_info_api_user__username__billing_info_post: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserBillingInfo"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Checkout Session */
  user_checkout_session_api_user__username__billing_checkout_session_post: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CheckoutSessionRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["CheckoutSessionInfo"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** User Portal Session */
  user_portal_session_api_user__username__billing_portal_session_post: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PortalSessionInfo"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Users */
  list_users_api_users_list_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRequest"][];
        };
      };
    };
  };
  /** Get My User */
  get_my_user_api_users_get_my_user_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRequest"];
        };
      };
    };
  };
  /** Get User */
  get_user_api_users_get_user_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetUserRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithCredsRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create User */
  create_user_api_users_create_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Update User */
  update_user_api_users_update_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Refresh Token */
  refresh_token_api_users_refresh_token_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshTokenRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["UserWithCredsRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Users */
  delete_users_api_users_delete_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteUsersRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Projects
   * @description Returns all projects visible to user.
   * `members` and `backends` are always empty - call `/api/projects/{project_name}/get` to retrieve them.
   */
  list_projects_api_projects_list_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRequest"][];
        };
      };
    };
  };
  /** Create Project */
  create_project_api_projects_create_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateProjectRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Projects */
  delete_projects_api_projects_delete_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteProjectsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Project */
  get_project_api_projects__project_name__get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Project Members */
  set_project_members_api_projects__project_name__set_members_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetProjectMembersRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Backend Types */
  list_backend_types_api_backends_list_types_post: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["BackendType"][];
        };
      };
    };
  };
  /** Get Backend Config Values */
  get_backend_config_values_api_backends_config_values_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["AWSConfigInfoWithCredsPartialRequest"] | components["schemas"]["AzureConfigInfoWithCredsPartialRequest"] | components["schemas"]["CudoConfigInfoWithCredsPartialRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsPartialRequest"] | components["schemas"]["GCPConfigInfoWithCredsPartialRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsPartialRequest"] | components["schemas"]["LambdaConfigInfoWithCredsPartialRequest"] | components["schemas"]["NebiusConfigInfoWithCredsPartialRequest"] | components["schemas"]["OCIConfigInfoWithCredsPartialRequest"] | components["schemas"]["RunpodConfigInfoWithCredsPartialRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsPartialRequest"] | components["schemas"]["VastAIConfigInfoWithCredsPartialRequest"] | components["schemas"]["DstackConfigInfoRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AWSConfigValuesRequest"] | components["schemas"]["AzureConfigValuesRequest"] | components["schemas"]["CudoConfigValuesRequest"] | components["schemas"]["DataCrunchConfigValuesRequest"] | components["schemas"]["GCPConfigValuesRequest"] | components["schemas"]["KubernetesConfigValuesRequest"] | components["schemas"]["LambdaConfigValuesRequest"] | components["schemas"]["NebiusConfigValuesRequest"] | components["schemas"]["OCIConfigValuesRequest"] | components["schemas"]["RunpodConfigValuesRequest"] | components["schemas"]["TensorDockConfigValuesRequest"] | components["schemas"]["VastAIConfigValuesRequest"] | components["schemas"]["DstackConfigValuesRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Backend Config Info */
  get_backend_config_info_api_project__project_name__backends__backend_name__config_info_post: {
    parameters: {
      path: {
        backend_name: components["schemas"]["BackendType"];
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["AWSConfigInfoWithCredsRequest"] | components["schemas"]["AzureConfigInfoWithCredsRequest"] | components["schemas"]["CudoConfigInfoWithCredsRequest"] | components["schemas"]["DataCrunchConfigInfoWithCredsRequest"] | components["schemas"]["GCPConfigInfoWithCredsRequest"] | components["schemas"]["KubernetesConfigInfoWithCredsRequest"] | components["schemas"]["LambdaConfigInfoWithCredsRequest"] | components["schemas"]["NebiusConfigInfoWithCredsRequest"] | components["schemas"]["OCIConfigInfoWithCredsRequest"] | components["schemas"]["RunpodConfigInfoWithCredsRequest"] | components["schemas"]["TensorDockConfigInfoWithCredsRequest"] | components["schemas"]["VastAIConfigInfoWithCredsRequest"] | components["schemas"]["DstackConfigInfoRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Pool Instances
   * @description Returns all instances visible to user sorted by descending created_at.
   * A **project_name** and **pool_name** can be specified as filters.
   *
   * The results are paginated. To get the next page, pass created_at and id of
   * the last run from the previous page as **prev_created_at** and **prev_id**.
   */
  list_pool_instances_api_pools_list_instances_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListPoolsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Pool */
  list_pool_api_project__project_name__pool_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PoolRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Pool */
  create_pool_api_project__project_name__pool_create_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreatePoolRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Default Pool */
  set_default_pool_api_project__project_name__pool_set_default_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetDefaultPoolRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Pool */
  delete_pool_api_project__project_name__pool_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeletePoolRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Show Pool */
  show_pool_api_project__project_name__pool_show_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ShowPoolRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PoolInstancesRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Remove Instance */
  remove_instance_api_project__project_name__pool_remove_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveInstanceRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Instance */
  add_instance_api_project__project_name__pool_add_remote_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddRemoteInstanceRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Fleets */
  list_fleets_api_project__project_name__fleets_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FleetRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Fleet */
  get_fleet_api_project__project_name__fleets_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetFleetRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FleetRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Fleet */
  create_fleet_api_project__project_name__fleets_create_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateFleetRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FleetRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Fleets */
  delete_fleets_api_project__project_name__fleets_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteFleetsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Fleet Instances */
  delete_fleet_instances_api_project__project_name__fleets_delete_instances_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteFleetInstancesRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Repos */
  list_repos_api_project__project_name__repos_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RepoHeadRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Repo */
  get_repo_api_project__project_name__repos_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetRepoRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RepoHeadWithCredsRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Init Repo */
  init_repo_api_project__project_name__repos_init_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SaveRepoCredsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Repos */
  delete_repos_api_project__project_name__repos_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteReposRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Upload Code */
  upload_code_api_project__project_name__repos_upload_code_post: {
    parameters: {
      query: {
        repo_id: string;
      };
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_upload_code_api_project__project_name__repos_upload_code_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * List Runs
   * @description Returns all runs visible to user sorted by descending submitted_at.
   * A **project_name**, **repo_id**, and **username** can be specified as filters.
   * Specifying **repo_id** without **project_name** returns no runs.
   *
   * The results are paginated. To get the next page, pass submitted_at and id of
   * the last run from the previous page as **prev_submitted_at** and **prev_run_id**.
   */
  list_runs_api_runs_list_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListRunsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Run */
  get_run_api_project__project_name__runs_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetRunRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Run Plan */
  get_run_plan_api_project__project_name__runs_get_plan_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetRunPlanRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunPlanRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Submit Run */
  submit_run_api_project__project_name__runs_submit_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SubmitRunRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Stop Runs */
  stop_runs_api_project__project_name__runs_stop_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["StopRunsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Runs */
  delete_runs_api_project__project_name__runs_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteRunsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Offers */
  get_offers_api_project__project_name__runs_get_offers_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetOffersRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["PoolInstanceOffersRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Instance */
  create_instance_api_project__project_name__runs_create_instance_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateInstanceRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InstanceRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Poll Logs */
  poll_logs_api_project__project_name__logs_poll_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PollLogsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["JobSubmissionLogsRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Secrets */
  list_secrets_api_project__project_name__secrets_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ListSecretsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["RunRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Secret */
  get_secret_api_project__project_name__secrets_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetSecretsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecretRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Add Or Update Secret */
  add_or_update_secret_api_project__project_name__secrets_add_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddSecretRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SecretRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Secrets */
  delete_secrets_api_project__project_name__secrets_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteSecretsRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Gateways */
  list_gateways_api_project__project_name__gateways_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Gateway */
  get_gateway_api_project__project_name__gateways_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetGatewayRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Gateway */
  create_gateway_api_project__project_name__gateways_create_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateGatewayRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Gateways */
  delete_gateways_api_project__project_name__gateways_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteGatewaysRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Default Gateway */
  set_default_gateway_api_project__project_name__gateways_set_default_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetDefaultGatewayRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Set Gateway Wildcard Domain */
  set_gateway_wildcard_domain_api_project__project_name__gateways_set_wildcard_domain_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SetWildcardDomainRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["GatewayRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** List Volumes */
  list_volumes_api_project__project_name__volumes_list_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeRequest"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Get Volume */
  get_volume_api_project__project_name__volumes_get_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetVolumeRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Create Volume */
  create_volume_api_project__project_name__volumes_create_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateVolumeRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["VolumeRequest"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Delete Volumes */
  delete_volumes_api_project__project_name__volumes_delete_post: {
    parameters: {
      path: {
        project_name: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteVolumesRequestRequest"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** Healthcheck */
  healthcheck_healthcheck_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
}
