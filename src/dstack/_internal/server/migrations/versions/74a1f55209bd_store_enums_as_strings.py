"""Store enums as strings

Revision ID: 74a1f55209bd
Revises: 728b1488b1b4
Create Date: 2025-08-06 13:49:28.785378

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "74a1f55209bd"
down_revision = "728b1488b1b4"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column(
            "global_role",
            existing_type=postgresql.ENUM("ADMIN", "USER", name="globalrole"),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("members", schema=None) as batch_op:
        batch_op.alter_column(
            "project_role",
            existing_type=postgresql.ENUM("ADMIN", "MANAGER", "USER", name="projectrole"),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("repos", schema=None) as batch_op:
        batch_op.alter_column(
            "type",
            existing_type=postgresql.ENUM("REMOTE", "LOCAL", "VIRTUAL", name="repotype"),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("runs", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "PENDING",
                "SUBMITTED",
                "PROVISIONING",
                "RUNNING",
                "TERMINATING",
                "TERMINATED",
                "FAILED",
                "DONE",
                name="runstatus",
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "termination_reason",
            existing_type=postgresql.ENUM(
                "ALL_JOBS_DONE",
                "JOB_FAILED",
                "RETRY_LIMIT_EXCEEDED",
                "STOPPED_BY_USER",
                "ABORTED_BY_USER",
                "SERVER_ERROR",
                name="runterminationreason",
            ),
            type_=sa.String(length=100),
            existing_nullable=True,
        )

    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "SUBMITTED",
                "PROVISIONING",
                "PULLING",
                "RUNNING",
                "TERMINATING",
                "TERMINATED",
                "ABORTED",
                "FAILED",
                "DONE",
                name="jobstatus",
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "termination_reason",
            existing_type=postgresql.ENUM(
                "FAILED_TO_START_DUE_TO_NO_CAPACITY",
                "INTERRUPTED_BY_NO_CAPACITY",
                "INSTANCE_UNREACHABLE",
                "WAITING_INSTANCE_LIMIT_EXCEEDED",
                "WAITING_RUNNER_LIMIT_EXCEEDED",
                "TERMINATED_BY_USER",
                "VOLUME_ERROR",
                "GATEWAY_ERROR",
                "SCALED_DOWN",
                "DONE_BY_RUNNER",
                "ABORTED_BY_USER",
                "TERMINATED_BY_SERVER",
                "INACTIVITY_DURATION_EXCEEDED",
                "TERMINATED_DUE_TO_UTILIZATION_POLICY",
                "CONTAINER_EXITED_WITH_ERROR",
                "PORTS_BINDING_FAILED",
                "CREATING_CONTAINER_ERROR",
                "EXECUTOR_ERROR",
                "MAX_DURATION_EXCEEDED",
                name="jobterminationreason",
            ),
            type_=sa.String(length=100),
            existing_nullable=True,
        )

    with op.batch_alter_table("fleets", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "SUBMITTED", "ACTIVE", "TERMINATING", "TERMINATED", "FAILED", name="fleetstatus"
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("gateways", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "SUBMITTED", "PROVISIONING", "RUNNING", "FAILED", name="gatewaystatus"
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("instances", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "PENDING",
                "PROVISIONING",
                "IDLE",
                "BUSY",
                "TERMINATING",
                "TERMINATED",
                name="instancestatus",
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    with op.batch_alter_table("volumes", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=postgresql.ENUM(
                "SUBMITTED", "PROVISIONING", "ACTIVE", "FAILED", name="volumestatus"
            ),
            type_=sa.String(length=100),
            existing_nullable=False,
        )

    sa.Enum("ADMIN", "USER", name="globalrole").drop(op.get_bind())
    sa.Enum(
        "ALL_JOBS_DONE",
        "JOB_FAILED",
        "RETRY_LIMIT_EXCEEDED",
        "STOPPED_BY_USER",
        "ABORTED_BY_USER",
        "SERVER_ERROR",
        name="runterminationreason",
    ).drop(op.get_bind())
    sa.Enum("SUBMITTED", "PROVISIONING", "RUNNING", "FAILED", name="gatewaystatus").drop(
        op.get_bind()
    )
    sa.Enum("SUBMITTED", "PROVISIONING", "ACTIVE", "FAILED", name="volumestatus").drop(
        op.get_bind()
    )
    sa.Enum(
        "PENDING",
        "SUBMITTED",
        "PROVISIONING",
        "RUNNING",
        "TERMINATING",
        "TERMINATED",
        "FAILED",
        "DONE",
        name="runstatus",
    ).drop(op.get_bind())
    sa.Enum("REMOTE", "LOCAL", "VIRTUAL", name="repotype").drop(op.get_bind())
    sa.Enum(
        "SUBMITTED",
        "PROVISIONING",
        "PULLING",
        "RUNNING",
        "TERMINATING",
        "TERMINATED",
        "ABORTED",
        "FAILED",
        "DONE",
        name="jobstatus",
    ).drop(op.get_bind())
    sa.Enum(
        "PENDING",
        "PROVISIONING",
        "IDLE",
        "BUSY",
        "TERMINATING",
        "TERMINATED",
        name="instancestatus",
    ).drop(op.get_bind())
    sa.Enum("SUBMITTED", "ACTIVE", "TERMINATING", "TERMINATED", "FAILED", name="fleetstatus").drop(
        op.get_bind()
    )
    sa.Enum("ADMIN", "MANAGER", "USER", name="projectrole").drop(op.get_bind())
    sa.Enum(
        "FAILED_TO_START_DUE_TO_NO_CAPACITY",
        "INTERRUPTED_BY_NO_CAPACITY",
        "INSTANCE_UNREACHABLE",
        "WAITING_INSTANCE_LIMIT_EXCEEDED",
        "WAITING_RUNNER_LIMIT_EXCEEDED",
        "TERMINATED_BY_USER",
        "VOLUME_ERROR",
        "GATEWAY_ERROR",
        "SCALED_DOWN",
        "DONE_BY_RUNNER",
        "ABORTED_BY_USER",
        "TERMINATED_BY_SERVER",
        "INACTIVITY_DURATION_EXCEEDED",
        "TERMINATED_DUE_TO_UTILIZATION_POLICY",
        "CONTAINER_EXITED_WITH_ERROR",
        "PORTS_BINDING_FAILED",
        "CREATING_CONTAINER_ERROR",
        "EXECUTOR_ERROR",
        "MAX_DURATION_EXCEEDED",
        name="jobterminationreason",
    ).drop(op.get_bind())
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "FAILED_TO_START_DUE_TO_NO_CAPACITY",
        "INTERRUPTED_BY_NO_CAPACITY",
        "INSTANCE_UNREACHABLE",
        "WAITING_INSTANCE_LIMIT_EXCEEDED",
        "WAITING_RUNNER_LIMIT_EXCEEDED",
        "TERMINATED_BY_USER",
        "VOLUME_ERROR",
        "GATEWAY_ERROR",
        "SCALED_DOWN",
        "DONE_BY_RUNNER",
        "ABORTED_BY_USER",
        "TERMINATED_BY_SERVER",
        "INACTIVITY_DURATION_EXCEEDED",
        "TERMINATED_DUE_TO_UTILIZATION_POLICY",
        "CONTAINER_EXITED_WITH_ERROR",
        "PORTS_BINDING_FAILED",
        "CREATING_CONTAINER_ERROR",
        "EXECUTOR_ERROR",
        "MAX_DURATION_EXCEEDED",
        name="jobterminationreason",
    ).create(op.get_bind())
    sa.Enum("ADMIN", "MANAGER", "USER", name="projectrole").create(op.get_bind())
    sa.Enum(
        "SUBMITTED", "ACTIVE", "TERMINATING", "TERMINATED", "FAILED", name="fleetstatus"
    ).create(op.get_bind())
    sa.Enum(
        "PENDING",
        "PROVISIONING",
        "IDLE",
        "BUSY",
        "TERMINATING",
        "TERMINATED",
        name="instancestatus",
    ).create(op.get_bind())
    sa.Enum(
        "SUBMITTED",
        "PROVISIONING",
        "PULLING",
        "RUNNING",
        "TERMINATING",
        "TERMINATED",
        "ABORTED",
        "FAILED",
        "DONE",
        name="jobstatus",
    ).create(op.get_bind())
    sa.Enum("REMOTE", "LOCAL", "VIRTUAL", name="repotype").create(op.get_bind())
    sa.Enum(
        "PENDING",
        "SUBMITTED",
        "PROVISIONING",
        "RUNNING",
        "TERMINATING",
        "TERMINATED",
        "FAILED",
        "DONE",
        name="runstatus",
    ).create(op.get_bind())
    sa.Enum("SUBMITTED", "PROVISIONING", "ACTIVE", "FAILED", name="volumestatus").create(
        op.get_bind()
    )
    sa.Enum("SUBMITTED", "PROVISIONING", "RUNNING", "FAILED", name="gatewaystatus").create(
        op.get_bind()
    )
    sa.Enum(
        "ALL_JOBS_DONE",
        "JOB_FAILED",
        "RETRY_LIMIT_EXCEEDED",
        "STOPPED_BY_USER",
        "ABORTED_BY_USER",
        "SERVER_ERROR",
        name="runterminationreason",
    ).create(op.get_bind())
    sa.Enum("ADMIN", "USER", name="globalrole").create(op.get_bind())
    with op.batch_alter_table("volumes", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "SUBMITTED", "PROVISIONING", "ACTIVE", "FAILED", name="volumestatus"
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::volumestatus",
        )

    with op.batch_alter_table("users", schema=None) as batch_op:
        batch_op.alter_column(
            "global_role",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM("ADMIN", "USER", name="globalrole"),
            existing_nullable=False,
            postgresql_using="global_role::VARCHAR::globalrole",
        )

    with op.batch_alter_table("runs", schema=None) as batch_op:
        batch_op.alter_column(
            "termination_reason",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "ALL_JOBS_DONE",
                "JOB_FAILED",
                "RETRY_LIMIT_EXCEEDED",
                "STOPPED_BY_USER",
                "ABORTED_BY_USER",
                "SERVER_ERROR",
                name="runterminationreason",
            ),
            existing_nullable=True,
            postgresql_using="termination_reason::VARCHAR::runterminationreason",
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "PENDING",
                "SUBMITTED",
                "PROVISIONING",
                "RUNNING",
                "TERMINATING",
                "TERMINATED",
                "FAILED",
                "DONE",
                name="runstatus",
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::runstatus",
        )

    with op.batch_alter_table("repos", schema=None) as batch_op:
        batch_op.alter_column(
            "type",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM("REMOTE", "LOCAL", "VIRTUAL", name="repotype"),
            existing_nullable=False,
            postgresql_using="type::VARCHAR::repotype",
        )

    with op.batch_alter_table("members", schema=None) as batch_op:
        batch_op.alter_column(
            "project_role",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM("ADMIN", "MANAGER", "USER", name="projectrole"),
            existing_nullable=False,
            postgresql_using="project_role::VARCHAR::projectrole",
        )

    with op.batch_alter_table("jobs", schema=None) as batch_op:
        batch_op.alter_column(
            "termination_reason",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "FAILED_TO_START_DUE_TO_NO_CAPACITY",
                "INTERRUPTED_BY_NO_CAPACITY",
                "INSTANCE_UNREACHABLE",
                "WAITING_INSTANCE_LIMIT_EXCEEDED",
                "WAITING_RUNNER_LIMIT_EXCEEDED",
                "TERMINATED_BY_USER",
                "VOLUME_ERROR",
                "GATEWAY_ERROR",
                "SCALED_DOWN",
                "DONE_BY_RUNNER",
                "ABORTED_BY_USER",
                "TERMINATED_BY_SERVER",
                "INACTIVITY_DURATION_EXCEEDED",
                "TERMINATED_DUE_TO_UTILIZATION_POLICY",
                "CONTAINER_EXITED_WITH_ERROR",
                "PORTS_BINDING_FAILED",
                "CREATING_CONTAINER_ERROR",
                "EXECUTOR_ERROR",
                "MAX_DURATION_EXCEEDED",
                name="jobterminationreason",
            ),
            existing_nullable=True,
            postgresql_using="termination_reason::VARCHAR::jobterminationreason",
        )
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "SUBMITTED",
                "PROVISIONING",
                "PULLING",
                "RUNNING",
                "TERMINATING",
                "TERMINATED",
                "ABORTED",
                "FAILED",
                "DONE",
                name="jobstatus",
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::jobstatus",
        )

    with op.batch_alter_table("instances", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "PENDING",
                "PROVISIONING",
                "IDLE",
                "BUSY",
                "TERMINATING",
                "TERMINATED",
                name="instancestatus",
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::instancestatus",
        )

    with op.batch_alter_table("gateways", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "SUBMITTED", "PROVISIONING", "RUNNING", "FAILED", name="gatewaystatus"
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::gatewaystatus",
        )

    with op.batch_alter_table("fleets", schema=None) as batch_op:
        batch_op.alter_column(
            "status",
            existing_type=sa.String(length=100),
            type_=postgresql.ENUM(
                "SUBMITTED", "ACTIVE", "TERMINATING", "TERMINATED", "FAILED", name="fleetstatus"
            ),
            existing_nullable=False,
            postgresql_using="status::VARCHAR::fleetstatus",
        )

    # ### end Alembic commands ###
