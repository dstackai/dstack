name: Release

on:
  push:
    tags:
      - '*'

jobs:
  cli-test-tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python-version: [ 3.7, 3.8, 3.9, "3.10", 3.11 ]
    defaults:
      run:
        working-directory: cli
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
      - name: Run pytest
        run: |
          mkdir -p dstack/_internal/hub/statics
          pytest tests/ --ignore=tests/integration/

  build-hub-tag:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hub
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install packages
        run: npm install
      - name: Build dist
        run: npm run build
      - name: Upload dist
        uses: actions/upload-artifact@v1
        with:
          name: hub-dist
          path: hub/build

  cli-upload-tag:
    runs-on: ubuntu-latest
    needs:
      - cli-test-tag
      - build-hub-tag
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Download hub dist
        uses: actions/download-artifact@v1
        with:
          name: hub-dist
      - name: Copy hub dist
        run: |
          mkdir -p cli/dstack/_internal/hub/statics
          cp -a hub-dist/** cli/dstack/_internal/hub/statics
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r cli/requirements.txt
          pip install wheel twine
      - name: Upload pip package
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          BASE_IMAGE=$(cat cli/dstack/version.py | grep base_image)
          echo "__version__ = \"$VERSION\"" > cli/dstack/version.py
          echo "__is_release__ = True" >> cli/dstack/version.py
          echo $BASE_IMAGE >> cli/dstack/version.py
          cp README.md cli
          python setup.py sdist bdist_wheel
          python -m twine upload --repository pypi --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*

  runner-test-tag:
    defaults:
      run:
        working-directory: runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.10
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51.2
          args: --issues-exit-code=0 --timeout=20m
          working-directory: runner
      - name: Test
        run: |
          go version
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          go test -race $(go list ./... | grep -v /vendor/)

  runner-compile-tag:
    defaults:
      run:
        working-directory: runner
    env:
      REPO_NAME: github.com/dstackai/dstack
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest"}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest"}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest"}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.10
      - name: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          ACTIONSOS: ${{ matrix.runson }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          go build -ldflags "-X '$REPO_NAME/runner/version.Version=$VERSION' -X '$REPO_NAME/runner/pkg/log.CloudLog=true' -extldflags '-static'" -o dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
      - uses: actions/upload-artifact@v2
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner/dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}

  runner-upload-tag:
    defaults:
      run:
        working-directory: runner
    needs: [ runner-compile-tag ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest", platform: "x86", extension: ""}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ""}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ".exe"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest", platform: "amd64", extension: ""}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest", platform: "arm64", extension: ""}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install AWS
        run:  pip install awscli
      - name: Download Runner
        uses: actions/download-artifact@v1
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner
      - name: Upload to S3
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/$VERSION/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/latest/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read

  hub-docker-tag:
    defaults:
      run:
        working-directory: docker/hub
    runs-on: ubuntu-latest
    needs:
      - runner-upload-tag
      - cli-upload-tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Build and upload to DockerHub
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          docker buildx build --platform linux/arm64/v8 --build-arg VERSION=$VERSION --push --provenance=false --tag dstackai/dstack:$VERSION-arm64 -f release/Dockerfile .
          docker buildx build --platform linux/amd64 --build-arg VERSION=$VERSION --push --provenance=false --tag dstackai/dstack:$VERSION-amd64 -f release/Dockerfile .
          docker manifest create dstackai/dstack:$VERSION --amend dstackai/dstack:$VERSION-arm64 --amend dstackai/dstack:$VERSION-amd64
          docker manifest push dstackai/dstack:$VERSION
          docker manifest create dstackai/dstack:latest --amend dstackai/dstack:$VERSION-arm64 --amend dstackai/dstack:$VERSION-amd64
          docker manifest push dstackai/dstack:latest

  update-get-dstack-tag:
    runs-on: ubuntu-latest
    needs:
      - runner-upload-tag
      - cli-upload-tag
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Install AWS
        run: pip install awscli
      - run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo $VERSION | aws s3 cp - s3://get-dstack/cli/latest-version --acl public-read

  generate-json-schema:
    needs: [ cli-test-tag ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install AWS
        run: pip install awscli
      - name: Install dstack
        run: pip install .
      - name: Generate json schema
        run: |
          python -c "from dstack._internal.core.configuration import DstackConfiguration; print(DstackConfiguration.schema_json(indent=2))" > configuration.json
          python -c "from dstack._internal.core.profile import ProfilesConfig; print(ProfilesConfig.schema_json(indent=2))" > profiles.json
      - name: Upload json schema to S3
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          aws s3 cp configuration.json "s3://dstack-runner-downloads/$VERSION/schemas/configuration.json" --acl public-read
          aws s3 cp configuration.json "s3://dstack-runner-downloads/latest/schemas/configuration.json" --acl public-read
          aws s3 cp profiles.json "s3://dstack-runner-downloads/$VERSION/schemas/profiles.json" --acl public-read
          aws s3 cp profiles.json "s3://dstack-runner-downloads/latest/schemas/profiles.json" --acl public-read
