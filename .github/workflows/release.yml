name: Release

on:
  push:
    tags:
      - '*'

env:
  IMAGE_VERSION: "0.3"

jobs:
  cli-test-tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, ubuntu-latest, windows-latest ]
        python-version: [ 3.7, 3.8, 3.9, "3.10", 3.11 ]
    defaults:
      run:
        working-directory: cli
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements_dev.txt
      - name: Run pytest
        run: |
          mkdir -p dstack/_internal/hub/statics
          pytest tests/ --ignore=tests/integration/

  build-hub-tag:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: hub
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node 18
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install packages
        run: npm install
      - name: Build dist
        run: npm run build
      - name: Upload dist
        uses: actions/upload-artifact@v1
        with:
          name: hub-dist
          path: hub/build

  cli-upload-tag:
    runs-on: ubuntu-latest
    needs:
      - cli-test-tag
      - build-hub-tag
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Download hub dist
        uses: actions/download-artifact@v1
        with:
          name: hub-dist
      - name: Copy hub dist
        run: |
          mkdir -p cli/dstack/_internal/hub/statics
          cp -a hub-dist/** cli/dstack/_internal/hub/statics
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r cli/requirements.txt
          pip install wheel twine
      - name: Upload pip package
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "__version__ = \"$VERSION\"" > cli/dstack/version.py
          echo "__is_release__ = True" >> cli/dstack/version.py
          echo "miniforge_image = \"${{ env.IMAGE_VERSION }}\"" >> cli/dstack/version.py
          cp README.md cli
          python setup.py sdist bdist_wheel
          python -m twine upload --repository pypi --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*

  runner-test-tag:
    defaults:
      run:
        working-directory: runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.51.2
          args: --issues-exit-code=0 --timeout=20m
          working-directory: runner
      - name: Test
        run: |
          go version
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          go test -race $(go list ./... | grep -v /vendor/)

  runner-compile-tag:
    defaults:
      run:
        working-directory: runner
    env:
      REPO_NAME: github.com/dstackai/dstack
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest"}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest"}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest"}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          ACTIONSOS: ${{ matrix.runson }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          go build -ldflags "-X '$REPO_NAME/runner/version.Version=$VERSION' -X '$REPO_NAME/runner/pkg/log.CloudLog=true' -extldflags '-static'" -o dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
      - uses: actions/upload-artifact@v2
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner/dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}

  runner-upload-tag:
    defaults:
      run:
        working-directory: runner
    needs: [ runner-compile-tag ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest", platform: "x86", extension: ""}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ""}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ".exe"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest", platform: "amd64", extension: ""}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest", platform: "arm64", extension: ""}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install AWS
        run:  pip install awscli
      - name: Download Runner
        uses: actions/download-artifact@v1
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner
      - name: Upload to S3
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/$VERSION/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/latest/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read

  hub-docker-tag:
    defaults:
      run:
        working-directory: docker/hub
    runs-on: ubuntu-latest
    needs:
      - runner-upload-tag
      - cli-upload-tag
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Build and upload to DockerHub
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          docker buildx build --platform linux/arm64/v8 --build-arg VERSION=$VERSION --push --provenance=false --tag dstackai/dstack:$VERSION-arm64 -f release/Dockerfile .
          docker buildx build --platform linux/amd64 --build-arg VERSION=$VERSION --push --provenance=false --tag dstackai/dstack:$VERSION-amd64 -f release/Dockerfile .
          docker manifest create dstackai/dstack:$VERSION --amend dstackai/dstack:$VERSION-arm64 --amend dstackai/dstack:$VERSION-amd64
          docker manifest push dstackai/dstack:$VERSION
          docker manifest create dstackai/dstack:latest --amend dstackai/dstack:$VERSION-arm64 --amend dstackai/dstack:$VERSION-amd64
          docker manifest push dstackai/dstack:latest

  ami-build:
    defaults:
      run:
        working-directory: runner
    needs:
      - runner-upload-tag
      - cli-upload-tag
      - hub-docker-tag
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        variants: [ ami-without-cuda, ami-cuda ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip
          unzip packer_1.8.0_linux_amd64.zip
          chmod +x packer
          cp -R ami/packer/* .
      - name: Run packer
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          ./packer build -var build_id=$VERSION -var build_prefix='' -var image_version=${{ env.IMAGE_VERSION }} -var-file=prod-var.json ${{ matrix.variants }}.json

  gcp-images-build:
    defaults:
      run:
        working-directory: runner
    needs:
      - runner-upload-tag
      - cli-upload-tag
      - hub-docker-tag
    strategy:
      matrix:
        variant: [ gcp-image, gcp-image-cuda ]
        include:
          - variant: gcp-image
            image_prefix: dstack-nocuda
          - variant: gcp-image-cuda
            image_prefix: dstack-cuda
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - uses: actions/checkout@v3
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/531508670106/locations/global/workloadIdentityPools/github-identity-pool/providers/github-id-provider'
          service_account: 'github-actions@dstack.iam.gserviceaccount.com'
          create_credentials_file: true
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
      - name: Download packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip
          unzip packer_1.8.0_linux_amd64.zip
          chmod +x packer
          cp -R ami/packer/* .
      - name: Run packer
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION//./-}
          ./packer build -var build_id=$VERSION -var build_prefix='' -var dstack_stage=PROD -var image_version=${{ env.IMAGE_VERSION }} ${{ matrix.variant }}.json
      - name: Publish image
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION//./-}
          gcloud compute images add-iam-policy-binding ${{ matrix.image_prefix }}-$VERSION --member='allAuthenticatedUsers' --role='roles/compute.imageUser'

  azure-image-build:
    defaults:
      run:
        working-directory: runner
    needs:
      - runner-upload-tag
      - cli-upload-tag
      - hub-docker-tag
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      VERSION: ${{ github.run_number }}
    strategy:
      matrix:
        variant: [ azure-image, azure-image-cuda ]
        include:
          - variant: azure-image
            image_prefix: dstack-nocuda
          - variant: azure-image-cuda
            image_prefix: dstack-cuda
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: Azure/login@v1
        name: Log in to az
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
      - name: Download packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip
          unzip packer_1.8.0_linux_amd64.zip
          chmod +x packer
          cp -R ami/packer/* .
      - name: Run packer
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          ./packer build -var build_prefix=${{ matrix.image_prefix }} -var build_id=$VERSION -var image_version=${{ env.IMAGE_VERSION }} ${{ matrix.variant }}.json
      - name: Publish azure image
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          IMAGE_DEFINITION=${{ matrix.image_prefix }}-$VERSION
          IMAGE_NAME=${{ matrix.image_prefix }}-$VERSION
          ../scripts/publish_azure_image.sh $IMAGE_DEFINITION $IMAGE_NAME

  update-get-dstack-tag:
    runs-on: ubuntu-latest
    needs:
      - ami-build
      - azure-image-build
      - gcp-images-build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: Install AWS
        run: pip install awscli
      - run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo $VERSION | aws s3 cp - s3://get-dstack/cli/latest-version --acl public-read