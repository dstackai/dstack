name: Release

on:
  push:
    tags:
      - '*'

jobs:
  cli-test-tag:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ macos-latest, windows-latest, ubuntu-latest ]
        python-version: [ 3.7, 3.8, 3.9, "3.10", 3.11 ]
    defaults:
      run:
        working-directory: ./cli
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Test with unittest
        run: |
          python -m unittest discover tests -t .

  cli-upload-tag:
    runs-on: ubuntu-latest
    needs:
      - cli-test-tag
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r cli/requirements.txt
          pip install wheel twine
      - name: Upload pip package
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "__version__ = \"$VERSION\"" > cli/dstack/version.py
          echo "__is_release__ = True" >> cli/dstack/version.py
          cp README.md cli
          python setup.py sdist bdist_wheel
          python -m twine upload --repository pypi --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} dist/*
  runner-test-master:
    defaults:
      run:
        working-directory: runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.29
          args: --issues-exit-code=0
          working-directory: runner

      - name: Test
        run: |
          go version
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          go test -race $(go list ./... | grep -v /vendor/)


  runner-compile-master:
    defaults:
      run:
        working-directory: runner
    env:
      REPO_NAME: github.com/dstackai/dstack
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest"}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "windows", goarch: "386", runson: "ubuntu-latest"}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest"}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest"}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          ACTIONSOS: ${{ matrix.runson }}
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          go build -ldflags "-X '$REPO_NAME/runner/version.Version=$VERSION' -X '$REPO_NAME/runner/pkg/log.CloudLog=true' -extldflags '-static'" -o dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}

      - uses: actions/upload-artifact@v2
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner/dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
  runner-upload-master:
    defaults:
      run:
        working-directory: runner
    needs: [ runner-compile-master ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        include:
          - {goos: "linux", goarch: "386", runson: "ubuntu-latest", platform: "x86", extension: ""}
          - {goos: "linux", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ""}
          - {goos: "windows", goarch: "386", runson: "ubuntu-latest", platform: "x86", extension: ".exe"}
          - {goos: "windows", goarch: "amd64", runson: "ubuntu-latest", platform: "amd64", extension: ".exe"}
          - {goos: "darwin", goarch: "amd64", runson: "macos-latest", platform: "amd64", extension: ""}
          - {goos: "darwin", goarch: "arm64", runson: "macos-latest", platform: "arm64", extension: ""}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: install AWS
        run:  pip install awscli
      - name: Download Runner
        uses: actions/download-artifact@v1
        with:
          name: dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }}
          path: runner
      - name: Upload to S3
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/$VERSION/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read
          aws s3 cp dstack-runner-${{ matrix.goos }}-${{ matrix.goarch }} "s3://dstack-runner-downloads/latest/binaries/dstack-runner-${{ matrix.goos }}-${{ matrix.platform }}${{ matrix.extension }}" --acl public-read
  ami-build:
    defaults:
      run:
        working-directory: runner
    needs: [ runner-upload-master ]
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    strategy:
      matrix:
        variants: [ ami-without-cuda, ami-cuda ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Download packer
        run: |
          wget https://releases.hashicorp.com/packer/1.8.0/packer_1.8.0_linux_amd64.zip
          unzip packer_1.8.0_linux_amd64.zip
          chmod +x packer
          cp -R ami/packer/* .
      - name: Run packer
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          ./packer build -var build_id=$VERSION -var build_prefix='' -var-file=prod-var.json ${{ matrix.variants }}.json
